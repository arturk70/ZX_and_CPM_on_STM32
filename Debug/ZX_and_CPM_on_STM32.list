
ZX_and_CPM_on_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002358  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08002464  08002464  00012464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027b0  080027b0  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080027b0  080027b0  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027b0  080027b0  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080027b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080027bc  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080027bc  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000534e  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010d2  00000000  00000000  0002537b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000680  00000000  00000000  00026450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e8  00000000  00000000  00026ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002dea  00000000  00000000  000270b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000041d3  00000000  00000000  00029ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00063136  00000000  00000000  0002e075  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000911ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae4  00000000  00000000  00091228  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	0800244c 	.word	0x0800244c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	0800244c 	.word	0x0800244c

0800014c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800014c:	b490      	push	{r4, r7}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	461a      	mov	r2, r3
 800015c:	68bb      	ldr	r3, [r7, #8]
 800015e:	0e1b      	lsrs	r3, r3, #24
 8000160:	4413      	add	r3, r2
 8000162:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8000164:	6822      	ldr	r2, [r4, #0]
 8000166:	68bb      	ldr	r3, [r7, #8]
 8000168:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800016a:	697b      	ldr	r3, [r7, #20]
 800016c:	fa93 f3a3 	rbit	r3, r3
 8000170:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000172:	693b      	ldr	r3, [r7, #16]
 8000174:	fab3 f383 	clz	r3, r3
 8000178:	b2db      	uxtb	r3, r3
 800017a:	009b      	lsls	r3, r3, #2
 800017c:	210f      	movs	r1, #15
 800017e:	fa01 f303 	lsl.w	r3, r1, r3
 8000182:	43db      	mvns	r3, r3
 8000184:	401a      	ands	r2, r3
 8000186:	68bb      	ldr	r3, [r7, #8]
 8000188:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800018a:	69fb      	ldr	r3, [r7, #28]
 800018c:	fa93 f3a3 	rbit	r3, r3
 8000190:	61bb      	str	r3, [r7, #24]
  return result;
 8000192:	69bb      	ldr	r3, [r7, #24]
 8000194:	fab3 f383 	clz	r3, r3
 8000198:	b2db      	uxtb	r3, r3
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	6879      	ldr	r1, [r7, #4]
 800019e:	fa01 f303 	lsl.w	r3, r1, r3
 80001a2:	4313      	orrs	r3, r2
 80001a4:	6023      	str	r3, [r4, #0]
}
 80001a6:	bf00      	nop
 80001a8:	3720      	adds	r7, #32
 80001aa:	46bd      	mov	sp, r7
 80001ac:	bc90      	pop	{r4, r7}
 80001ae:	4770      	bx	lr

080001b0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80001b0:	b490      	push	{r4, r7}
 80001b2:	b088      	sub	sp, #32
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	60f8      	str	r0, [r7, #12]
 80001b8:	60b9      	str	r1, [r7, #8]
 80001ba:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 80001bc:	68fb      	ldr	r3, [r7, #12]
 80001be:	461a      	mov	r2, r3
 80001c0:	68bb      	ldr	r3, [r7, #8]
 80001c2:	0e1b      	lsrs	r3, r3, #24
 80001c4:	4413      	add	r3, r2
 80001c6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80001c8:	6822      	ldr	r2, [r4, #0]
 80001ca:	68bb      	ldr	r3, [r7, #8]
 80001cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001ce:	697b      	ldr	r3, [r7, #20]
 80001d0:	fa93 f3a3 	rbit	r3, r3
 80001d4:	613b      	str	r3, [r7, #16]
  return result;
 80001d6:	693b      	ldr	r3, [r7, #16]
 80001d8:	fab3 f383 	clz	r3, r3
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	009b      	lsls	r3, r3, #2
 80001e0:	2103      	movs	r1, #3
 80001e2:	fa01 f303 	lsl.w	r3, r1, r3
 80001e6:	43db      	mvns	r3, r3
 80001e8:	401a      	ands	r2, r3
 80001ea:	68bb      	ldr	r3, [r7, #8]
 80001ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001ee:	69fb      	ldr	r3, [r7, #28]
 80001f0:	fa93 f3a3 	rbit	r3, r3
 80001f4:	61bb      	str	r3, [r7, #24]
  return result;
 80001f6:	69bb      	ldr	r3, [r7, #24]
 80001f8:	fab3 f383 	clz	r3, r3
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	009b      	lsls	r3, r3, #2
 8000200:	6879      	ldr	r1, [r7, #4]
 8000202:	fa01 f303 	lsl.w	r3, r1, r3
 8000206:	4313      	orrs	r3, r2
 8000208:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 800020a:	bf00      	nop
 800020c:	3720      	adds	r7, #32
 800020e:	46bd      	mov	sp, r7
 8000210:	bc90      	pop	{r4, r7}
 8000212:	4770      	bx	lr

08000214 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8000214:	b490      	push	{r4, r7}
 8000216:	b088      	sub	sp, #32
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)(&GPIOx->CRL) + (Pin >> 24));
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	461a      	mov	r2, r3
 8000224:	68bb      	ldr	r3, [r7, #8]
 8000226:	0e1b      	lsrs	r3, r3, #24
 8000228:	4413      	add	r3, r2
 800022a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800022c:	6822      	ldr	r2, [r4, #0]
 800022e:	68bb      	ldr	r3, [r7, #8]
 8000230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000232:	697b      	ldr	r3, [r7, #20]
 8000234:	fa93 f3a3 	rbit	r3, r3
 8000238:	613b      	str	r3, [r7, #16]
  return result;
 800023a:	693b      	ldr	r3, [r7, #16]
 800023c:	fab3 f383 	clz	r3, r3
 8000240:	b2db      	uxtb	r3, r3
 8000242:	009b      	lsls	r3, r3, #2
 8000244:	2104      	movs	r1, #4
 8000246:	fa01 f303 	lsl.w	r3, r1, r3
 800024a:	43db      	mvns	r3, r3
 800024c:	401a      	ands	r2, r3
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000252:	69fb      	ldr	r3, [r7, #28]
 8000254:	fa93 f3a3 	rbit	r3, r3
 8000258:	61bb      	str	r3, [r7, #24]
  return result;
 800025a:	69bb      	ldr	r3, [r7, #24]
 800025c:	fab3 f383 	clz	r3, r3
 8000260:	b2db      	uxtb	r3, r3
 8000262:	009b      	lsls	r3, r3, #2
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	fa01 f303 	lsl.w	r3, r1, r3
 800026a:	4313      	orrs	r3, r2
 800026c:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 800026e:	bf00      	nop
 8000270:	3720      	adds	r7, #32
 8000272:	46bd      	mov	sp, r7
 8000274:	bc90      	pop	{r4, r7}
 8000276:	4770      	bx	lr

08000278 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000278:	b480      	push	{r7}
 800027a:	b087      	sub	sp, #28
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	68da      	ldr	r2, [r3, #12]
 8000288:	68bb      	ldr	r3, [r7, #8]
 800028a:	0a1b      	lsrs	r3, r3, #8
 800028c:	43db      	mvns	r3, r3
 800028e:	401a      	ands	r2, r3
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	0a1b      	lsrs	r3, r3, #8
 8000294:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000296:	697b      	ldr	r3, [r7, #20]
 8000298:	fa93 f3a3 	rbit	r3, r3
 800029c:	613b      	str	r3, [r7, #16]
  return result;
 800029e:	693b      	ldr	r3, [r7, #16]
 80002a0:	fab3 f383 	clz	r3, r3
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	4619      	mov	r1, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	408b      	lsls	r3, r1
 80002ac:	431a      	orrs	r2, r3
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	60da      	str	r2, [r3, #12]
}
 80002b2:	bf00      	nop
 80002b4:	371c      	adds	r7, #28
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr

080002bc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
 80002c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	021b      	lsls	r3, r3, #8
 80002cc:	0c1b      	lsrs	r3, r3, #16
 80002ce:	617b      	str	r3, [r7, #20]
 80002d0:	697b      	ldr	r3, [r7, #20]
 80002d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002d4:	693b      	ldr	r3, [r7, #16]
 80002d6:	fa93 f3a3 	rbit	r3, r3
 80002da:	60fb      	str	r3, [r7, #12]
  return result;
 80002dc:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 80002de:	fab3 f383 	clz	r3, r3
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 80002e6:	e040      	b.n	800036a <LL_GPIO_Init+0xae>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 80002e8:	2201      	movs	r2, #1
 80002ea:	69fb      	ldr	r3, [r7, #28]
 80002ec:	409a      	lsls	r2, r3
 80002ee:	697b      	ldr	r3, [r7, #20]
 80002f0:	4013      	ands	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d036      	beq.n	8000364 <LL_GPIO_Init+0xa8>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 80002f6:	69fb      	ldr	r3, [r7, #28]
 80002f8:	2b07      	cmp	r3, #7
 80002fa:	d806      	bhi.n	800030a <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 80002fc:	f240 1201 	movw	r2, #257	; 0x101
 8000300:	69fb      	ldr	r3, [r7, #28]
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	61bb      	str	r3, [r7, #24]
 8000308:	e008      	b.n	800031c <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800030a:	69fb      	ldr	r3, [r7, #28]
 800030c:	3b08      	subs	r3, #8
 800030e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000312:	fa02 f303 	lsl.w	r3, r2, r3
 8000316:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800031a:	61bb      	str	r3, [r7, #24]
      /* Check Pin Mode and Pin Pull parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	461a      	mov	r2, r3
 8000322:	69b9      	ldr	r1, [r7, #24]
 8000324:	6878      	ldr	r0, [r7, #4]
 8000326:	f7ff ff11 	bl	800014c <LL_GPIO_SetPinMode>

      /* Pull-up Pull-down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800032a:	683b      	ldr	r3, [r7, #0]
 800032c:	691b      	ldr	r3, [r3, #16]
 800032e:	461a      	mov	r2, r3
 8000330:	69b9      	ldr	r1, [r7, #24]
 8000332:	6878      	ldr	r0, [r7, #4]
 8000334:	f7ff ffa0 	bl	8000278 <LL_GPIO_SetPinPull>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	2b01      	cmp	r3, #1
 800033e:	d003      	beq.n	8000348 <LL_GPIO_Init+0x8c>
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	2b09      	cmp	r3, #9
 8000346:	d10d      	bne.n	8000364 <LL_GPIO_Init+0xa8>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	461a      	mov	r2, r3
 800034e:	69b9      	ldr	r1, [r7, #24]
 8000350:	6878      	ldr	r0, [r7, #4]
 8000352:	f7ff ff2d 	bl	80001b0 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	461a      	mov	r2, r3
 800035c:	69b9      	ldr	r1, [r7, #24]
 800035e:	6878      	ldr	r0, [r7, #4]
 8000360:	f7ff ff58 	bl	8000214 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 8000364:	69fb      	ldr	r3, [r7, #28]
 8000366:	3301      	adds	r3, #1
 8000368:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 800036a:	697a      	ldr	r2, [r7, #20]
 800036c:	69fb      	ldr	r3, [r7, #28]
 800036e:	fa22 f303 	lsr.w	r3, r2, r3
 8000372:	2b00      	cmp	r3, #0
 8000374:	d1b8      	bne.n	80002e8 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 8000376:	2300      	movs	r3, #0
}
 8000378:	4618      	mov	r0, r3
 800037a:	3720      	adds	r7, #32
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <LL_SPI_IsEnabled>:
  * @rmtoll CR1          SPE           LL_SPI_IsEnabled
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000390:	2b40      	cmp	r3, #64	; 0x40
 8000392:	d101      	bne.n	8000398 <LL_SPI_IsEnabled+0x18>
 8000394:	2301      	movs	r3, #1
 8000396:	e000      	b.n	800039a <LL_SPI_IsEnabled+0x1a>
 8000398:	2300      	movs	r3, #0
}
 800039a:	4618      	mov	r0, r3
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <LL_SPI_SetCRCPolynomial>:
  * @param  SPIx SPI Instance
  * @param  CRCPoly This parameter must be a number between Min_Data = 0x00 and Max_Data = 0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetCRCPolynomial(SPI_TypeDef *SPIx, uint32_t CRCPoly)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	b29b      	uxth	r3, r3
 80003b2:	461a      	mov	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	611a      	str	r2, [r3, #16]
}
 80003b8:	bf00      	nop
 80003ba:	370c      	adds	r7, #12
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc80      	pop	{r7}
 80003c0:	4770      	bx	lr

080003c2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80003c2:	b580      	push	{r7, lr}
 80003c4:	b084      	sub	sp, #16
 80003c6:	af00      	add	r7, sp, #0
 80003c8:	6078      	str	r0, [r7, #4]
 80003ca:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80003cc:	2301      	movs	r3, #1
 80003ce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f7ff ffd5 	bl	8000380 <LL_SPI_IsEnabled>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d139      	bne.n	8000450 <LL_SPI_Init+0x8e>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80003e4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80003e8:	683a      	ldr	r2, [r7, #0]
 80003ea:	6811      	ldr	r1, [r2, #0]
 80003ec:	683a      	ldr	r2, [r7, #0]
 80003ee:	6852      	ldr	r2, [r2, #4]
 80003f0:	4311      	orrs	r1, r2
 80003f2:	683a      	ldr	r2, [r7, #0]
 80003f4:	6892      	ldr	r2, [r2, #8]
 80003f6:	4311      	orrs	r1, r2
 80003f8:	683a      	ldr	r2, [r7, #0]
 80003fa:	68d2      	ldr	r2, [r2, #12]
 80003fc:	4311      	orrs	r1, r2
 80003fe:	683a      	ldr	r2, [r7, #0]
 8000400:	6912      	ldr	r2, [r2, #16]
 8000402:	4311      	orrs	r1, r2
 8000404:	683a      	ldr	r2, [r7, #0]
 8000406:	6952      	ldr	r2, [r2, #20]
 8000408:	4311      	orrs	r1, r2
 800040a:	683a      	ldr	r2, [r7, #0]
 800040c:	6992      	ldr	r2, [r2, #24]
 800040e:	4311      	orrs	r1, r2
 8000410:	683a      	ldr	r2, [r7, #0]
 8000412:	69d2      	ldr	r2, [r2, #28]
 8000414:	4311      	orrs	r1, r2
 8000416:	683a      	ldr	r2, [r7, #0]
 8000418:	6a12      	ldr	r2, [r2, #32]
 800041a:	430a      	orrs	r2, r1
 800041c:	431a      	orrs	r2, r3
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	601a      	str	r2, [r3, #0]

    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2, SPI_CR2_SSOE, (SPI_InitStruct->NSS >> 16U));
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	f023 0204 	bic.w	r2, r3, #4
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	0c1b      	lsrs	r3, r3, #16
 8000430:	431a      	orrs	r2, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	6a1b      	ldr	r3, [r3, #32]
 800043a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800043e:	d105      	bne.n	800044c <LL_SPI_Init+0x8a>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000444:	4619      	mov	r1, r3
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f7ff ffac 	bl	80003a4 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 800044c:	2300      	movs	r3, #0
 800044e:	73fb      	strb	r3, [r7, #15]

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2S_SUPPORT */
  return status;
 8000450:	7bfb      	ldrb	r3, [r7, #15]
}
 8000452:	4618      	mov	r0, r3
 8000454:	3710      	adds	r7, #16
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}

0800045a <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 800045a:	b480      	push	{r7}
 800045c:	b083      	sub	sp, #12
 800045e:	af00      	add	r7, sp, #0
 8000460:	6078      	str	r0, [r7, #4]
 8000462:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	683a      	ldr	r2, [r7, #0]
 8000468:	629a      	str	r2, [r3, #40]	; 0x28
}
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr

08000474 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	683a      	ldr	r2, [r7, #0]
 8000482:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	683a      	ldr	r2, [r7, #0]
 800049c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	683a      	ldr	r2, [r7, #0]
 80004b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr

080004c2 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80004c2:	b480      	push	{r7}
 80004c4:	b083      	sub	sp, #12
 80004c6:	af00      	add	r7, sp, #0
 80004c8:	6078      	str	r0, [r7, #4]
 80004ca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	683a      	ldr	r2, [r7, #0]
 80004d0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr

080004dc <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	683a      	ldr	r2, [r7, #0]
 80004ea:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr

080004f6 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	683a      	ldr	r2, [r7, #0]
 8000504:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr

08000510 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	f043 0201 	orr.w	r2, r3, #1
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	615a      	str	r2, [r3, #20]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	bc80      	pop	{r7}
 800052c:	4770      	bx	lr
	...

08000530 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <LL_TIM_Init+0xb0>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d00b      	beq.n	8000560 <LL_TIM_Init+0x30>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800054e:	d007      	beq.n	8000560 <LL_TIM_Init+0x30>
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a24      	ldr	r2, [pc, #144]	; (80005e4 <LL_TIM_Init+0xb4>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d003      	beq.n	8000560 <LL_TIM_Init+0x30>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a23      	ldr	r2, [pc, #140]	; (80005e8 <LL_TIM_Init+0xb8>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d106      	bne.n	800056e <LL_TIM_Init+0x3e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	685b      	ldr	r3, [r3, #4]
 800056a:	4313      	orrs	r3, r2
 800056c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <LL_TIM_Init+0xb0>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d00b      	beq.n	800058e <LL_TIM_Init+0x5e>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800057c:	d007      	beq.n	800058e <LL_TIM_Init+0x5e>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <LL_TIM_Init+0xb4>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d003      	beq.n	800058e <LL_TIM_Init+0x5e>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a17      	ldr	r2, [pc, #92]	; (80005e8 <LL_TIM_Init+0xb8>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d106      	bne.n	800059c <LL_TIM_Init+0x6c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	4313      	orrs	r3, r2
 800059a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	4619      	mov	r1, r3
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff ff63 	bl	8000474 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	4619      	mov	r1, r3
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f7ff ff50 	bl	800045a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4a08      	ldr	r2, [pc, #32]	; (80005e0 <LL_TIM_Init+0xb0>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d105      	bne.n	80005ce <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	7c1b      	ldrb	r3, [r3, #16]
 80005c6:	4619      	mov	r1, r3
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff ff60 	bl	800048e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f7ff ff9e 	bl	8000510 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80005d4:	2300      	movs	r3, #0
}
 80005d6:	4618      	mov	r0, r3
 80005d8:	3710      	adds	r7, #16
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40012c00 	.word	0x40012c00
 80005e4:	40000400 	.word	0x40000400
 80005e8:	40000800 	.word	0x40000800

080005ec <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80005f8:	2301      	movs	r3, #1
 80005fa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	2b10      	cmp	r3, #16
 8000600:	d012      	beq.n	8000628 <LL_TIM_OC_Init+0x3c>
 8000602:	2b10      	cmp	r3, #16
 8000604:	d802      	bhi.n	800060c <LL_TIM_OC_Init+0x20>
 8000606:	2b01      	cmp	r3, #1
 8000608:	d007      	beq.n	800061a <LL_TIM_OC_Init+0x2e>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800060a:	e022      	b.n	8000652 <LL_TIM_OC_Init+0x66>
  switch (Channel)
 800060c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000610:	d011      	beq.n	8000636 <LL_TIM_OC_Init+0x4a>
 8000612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000616:	d015      	beq.n	8000644 <LL_TIM_OC_Init+0x58>
      break;
 8000618:	e01b      	b.n	8000652 <LL_TIM_OC_Init+0x66>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	68f8      	ldr	r0, [r7, #12]
 800061e:	f000 f81d 	bl	800065c <OC1Config>
 8000622:	4603      	mov	r3, r0
 8000624:	75fb      	strb	r3, [r7, #23]
      break;
 8000626:	e014      	b.n	8000652 <LL_TIM_OC_Init+0x66>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	68f8      	ldr	r0, [r7, #12]
 800062c:	f000 f87c 	bl	8000728 <OC2Config>
 8000630:	4603      	mov	r3, r0
 8000632:	75fb      	strb	r3, [r7, #23]
      break;
 8000634:	e00d      	b.n	8000652 <LL_TIM_OC_Init+0x66>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	68f8      	ldr	r0, [r7, #12]
 800063a:	f000 f8df 	bl	80007fc <OC3Config>
 800063e:	4603      	mov	r3, r0
 8000640:	75fb      	strb	r3, [r7, #23]
      break;
 8000642:	e006      	b.n	8000652 <LL_TIM_OC_Init+0x66>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000644:	6879      	ldr	r1, [r7, #4]
 8000646:	68f8      	ldr	r0, [r7, #12]
 8000648:	f000 f942 	bl	80008d0 <OC4Config>
 800064c:	4603      	mov	r3, r0
 800064e:	75fb      	strb	r3, [r7, #23]
      break;
 8000650:	bf00      	nop
  }

  return result;
 8000652:	7dfb      	ldrb	r3, [r7, #23]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6a1b      	ldr	r3, [r3, #32]
 800066a:	f023 0201 	bic.w	r2, r3, #1
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6a1b      	ldr	r3, [r3, #32]
 8000676:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f023 0303 	bic.w	r3, r3, #3
 800068a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4313      	orrs	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	f023 0202 	bic.w	r2, r3, #2
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	f023 0201 	bic.w	r2, r3, #1
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	685b      	ldr	r3, [r3, #4]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	4a1a      	ldr	r2, [pc, #104]	; (8000724 <OC1Config+0xc8>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d11e      	bne.n	80006fc <OC1Config+0xa0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	f023 0208 	bic.w	r2, r3, #8
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	4313      	orrs	r3, r2
 80006cc:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	f023 0204 	bic.w	r2, r3, #4
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	009b      	lsls	r3, r3, #2
 80006da:	4313      	orrs	r3, r2
 80006dc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	4313      	orrs	r3, r2
 80006fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	693a      	ldr	r2, [r7, #16]
 8000700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	4619      	mov	r1, r3
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff feca 	bl	80004a8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40012c00 	.word	0x40012c00

08000728 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	6a1b      	ldr	r3, [r3, #32]
 8000736:	f023 0210 	bic.w	r2, r3, #16
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6a1b      	ldr	r3, [r3, #32]
 8000742:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000756:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	021b      	lsls	r3, r3, #8
 8000764:	4313      	orrs	r3, r2
 8000766:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	f023 0220 	bic.w	r2, r3, #32
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	691b      	ldr	r3, [r3, #16]
 8000772:	011b      	lsls	r3, r3, #4
 8000774:	4313      	orrs	r3, r2
 8000776:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	f023 0210 	bic.w	r2, r3, #16
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	011b      	lsls	r3, r3, #4
 8000784:	4313      	orrs	r3, r2
 8000786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <OC2Config+0xd0>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d11f      	bne.n	80007d0 <OC2Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	019b      	lsls	r3, r3, #6
 800079c:	4313      	orrs	r3, r2
 800079e:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	019b      	lsls	r3, r3, #6
 80007ac:	4313      	orrs	r3, r2
 80007ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	4313      	orrs	r3, r2
 80007be:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80007c0:	693b      	ldr	r3, [r7, #16]
 80007c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	4313      	orrs	r3, r2
 80007ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	693a      	ldr	r2, [r7, #16]
 80007d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	4619      	mov	r1, r3
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f7ff fe6d 	bl	80004c2 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80007ee:	2300      	movs	r3, #0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40012c00 	.word	0x40012c00

080007fc <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	6a1b      	ldr	r3, [r3, #32]
 800080a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	6a1b      	ldr	r3, [r3, #32]
 8000816:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f023 0303 	bic.w	r3, r3, #3
 800082a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4313      	orrs	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	021b      	lsls	r3, r3, #8
 8000846:	4313      	orrs	r3, r2
 8000848:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	021b      	lsls	r3, r3, #8
 8000856:	4313      	orrs	r3, r2
 8000858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <OC3Config+0xd0>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d11f      	bne.n	80008a2 <OC3Config+0xa6>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	029b      	lsls	r3, r3, #10
 800086e:	4313      	orrs	r3, r2
 8000870:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	029b      	lsls	r3, r3, #10
 800087e:	4313      	orrs	r3, r2
 8000880:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	011b      	lsls	r3, r3, #4
 800088e:	4313      	orrs	r3, r2
 8000890:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	69db      	ldr	r3, [r3, #28]
 800089c:	015b      	lsls	r3, r3, #5
 800089e:	4313      	orrs	r3, r2
 80008a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	68db      	ldr	r3, [r3, #12]
 80008b2:	4619      	mov	r1, r3
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff fe11 	bl	80004dc <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3718      	adds	r7, #24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40012c00 	.word	0x40012c00

080008d0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	6a1b      	ldr	r3, [r3, #32]
 80008de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6a1b      	ldr	r3, [r3, #32]
 80008ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	021b      	lsls	r3, r3, #8
 800090c:	4313      	orrs	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000910:	693b      	ldr	r3, [r7, #16]
 8000912:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	691b      	ldr	r3, [r3, #16]
 800091a:	031b      	lsls	r3, r3, #12
 800091c:	4313      	orrs	r3, r2
 800091e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	031b      	lsls	r3, r3, #12
 800092c:	4313      	orrs	r3, r2
 800092e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <OC4Config+0xa0>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d107      	bne.n	8000948 <OC4Config+0x78>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	019b      	lsls	r3, r3, #6
 8000944:	4313      	orrs	r3, r2
 8000946:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	4619      	mov	r1, r3
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fdcb 	bl	80004f6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40012c00 	.word	0x40012c00

08000974 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	fbb2 f3f3 	udiv	r3, r2, r3
 8000986:	4a07      	ldr	r2, [pc, #28]	; (80009a4 <LL_InitTick+0x30>)
 8000988:	3b01      	subs	r3, #1
 800098a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <LL_InitTick+0x30>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <LL_InitTick+0x30>)
 8000994:	2205      	movs	r2, #5
 8000996:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000998:	bf00      	nop
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	e000e010 	.word	0xe000e010

080009a8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80009b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ffdd 	bl	8000974 <LL_InitTick>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
	...

080009c4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <LL_mDelay+0x44>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80009d2:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009da:	d00c      	beq.n	80009f6 <LL_mDelay+0x32>
  {
    Delay++;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3301      	adds	r3, #1
 80009e0:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80009e2:	e008      	b.n	80009f6 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <LL_mDelay+0x44>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <LL_mDelay+0x32>
    {
      Delay--;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	3b01      	subs	r3, #1
 80009f4:	607b      	str	r3, [r7, #4]
  while (Delay)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d1f3      	bne.n	80009e4 <LL_mDelay+0x20>
    }
  }
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bc80      	pop	{r7}
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	e000e010 	.word	0xe000e010

08000a0c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000a14:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <LL_SetSystemCoreClock+0x18>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000000 	.word	0x20000000

08000a28 <cpmdisp_scroll>:

void cpmdisp_setcursor(uint8_t row, uint8_t col) {
	cpos[COL] = col; cpos[ROW] = row;
}

void cpmdisp_scroll(uint8_t lnum) {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	//TODO scroll
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <drawsymbol>:

inline static void drawsymbol(uint8_t s) {
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b09f      	sub	sp, #124	; 0x7c
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	uint16_t chbuf[FNT_WIDTH*FNT_HEIGHT];

	for(uint8_t l=0;l<FNT_HEIGHT;l++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000a4c:	e055      	b.n	8000afa <drawsymbol+0xbe>
		for(uint8_t b=0;b<FNT_WIDTH-1;b++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000a54:	e048      	b.n	8000ae8 <drawsymbol+0xac>
			if((font[s][b]>>l)&0x01)
 8000a56:	79fa      	ldrb	r2, [r7, #7]
 8000a58:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000a5c:	4940      	ldr	r1, [pc, #256]	; (8000b60 <drawsymbol+0x124>)
 8000a5e:	00d2      	lsls	r2, r2, #3
 8000a60:	440a      	add	r2, r1
 8000a62:	4413      	add	r3, r2
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	461a      	mov	r2, r3
 8000a68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000a6c:	fa42 f303 	asr.w	r3, r2, r3
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d012      	beq.n	8000a9e <drawsymbol+0x62>
				chbuf[l*FNT_WIDTH+b]=FG_COLOR;
 8000a78:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	005b      	lsls	r3, r3, #1
 8000a84:	461a      	mov	r2, r3
 8000a86:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000a8a:	4413      	add	r3, r2
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000a92:	4413      	add	r3, r2
 8000a94:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000a98:	f823 2c64 	strh.w	r2, [r3, #-100]
 8000a9c:	e010      	b.n	8000ac0 <drawsymbol+0x84>
			  else
				chbuf[l*FNT_WIDTH+b]=BG_COLOR;
 8000a9e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	4413      	add	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	461a      	mov	r2, r3
 8000aac:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000ab0:	4413      	add	r3, r2
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000ab8:	4413      	add	r3, r2
 8000aba:	2200      	movs	r2, #0
 8000abc:	f823 2c64 	strh.w	r2, [r3, #-100]
			chbuf[l*FNT_WIDTH+FNT_WIDTH-1]=BG_COLOR;
 8000ac0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ac4:	1c5a      	adds	r2, r3, #1
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	4413      	add	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8000ad6:	4413      	add	r3, r2
 8000ad8:	2200      	movs	r2, #0
 8000ada:	f823 2c64 	strh.w	r2, [r3, #-100]
		for(uint8_t b=0;b<FNT_WIDTH-1;b++) {
 8000ade:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8000ae8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8000aec:	2b04      	cmp	r3, #4
 8000aee:	d9b2      	bls.n	8000a56 <drawsymbol+0x1a>
	for(uint8_t l=0;l<FNT_HEIGHT;l++) {
 8000af0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000af4:	3301      	adds	r3, #1
 8000af6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000afa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000afe:	2b07      	cmp	r3, #7
 8000b00:	d9a5      	bls.n	8000a4e <drawsymbol+0x12>
		}
	}
	ILI9341_sendBuf(
			START_POS+cpos[COL]*FNT_WIDTH,
 8000b02:	4b18      	ldr	r3, [pc, #96]	; (8000b64 <drawsymbol+0x128>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
	ILI9341_sendBuf(
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	461a      	mov	r2, r3
 8000b0a:	0052      	lsls	r2, r2, #1
 8000b0c:	4413      	add	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	3304      	adds	r3, #4
 8000b14:	b298      	uxth	r0, r3
			START_LINE+cpos[ROW]*FNT_HEIGHT,
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <drawsymbol+0x128>)
 8000b18:	785b      	ldrb	r3, [r3, #1]
	ILI9341_sendBuf(
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	3314      	adds	r3, #20
 8000b22:	b299      	uxth	r1, r3
			START_POS+cpos[COL]*FNT_WIDTH+FNT_WIDTH-1,
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <drawsymbol+0x128>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
	ILI9341_sendBuf(
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	0052      	lsls	r2, r2, #1
 8000b2e:	4413      	add	r3, r2
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	b29b      	uxth	r3, r3
 8000b34:	3309      	adds	r3, #9
 8000b36:	b29a      	uxth	r2, r3
			START_LINE+cpos[ROW]*FNT_HEIGHT+FNT_HEIGHT-1,
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <drawsymbol+0x128>)
 8000b3a:	785b      	ldrb	r3, [r3, #1]
	ILI9341_sendBuf(
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	331b      	adds	r3, #27
 8000b44:	b29c      	uxth	r4, r3
 8000b46:	2330      	movs	r3, #48	; 0x30
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	4623      	mov	r3, r4
 8000b52:	f000 fc21 	bl	8001398 <ILI9341_sendBuf>
			chbuf, FNT_WIDTH*FNT_HEIGHT);
}
 8000b56:	bf00      	nop
 8000b58:	3774      	adds	r7, #116	; 0x74
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	08002464 	.word	0x08002464
 8000b64:	20000020 	.word	0x20000020

08000b68 <cpmdisp_clear>:

void cpmdisp_clear() {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af02      	add	r7, sp, #8
	ILI9341_fillArea(START_POS, START_LINE, END_POS, END_LINE, BG_COLOR);
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	23db      	movs	r3, #219	; 0xdb
 8000b74:	f240 123b 	movw	r2, #315	; 0x13b
 8000b78:	2114      	movs	r1, #20
 8000b7a:	2004      	movs	r0, #4
 8000b7c:	f000 fc72 	bl	8001464 <ILI9341_fillArea>
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <cpmdisp_Init>:

void cpmdisp_Init() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	ILI9341_Init();
 8000b8c:	f000 fa58 	bl	8001040 <ILI9341_Init>
	cpmdisp_clear();
 8000b90:	f7ff ffea 	bl	8000b68 <cpmdisp_clear>
	cpos[ROW] = 0; cpos[COL] = 0;
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <cpmdisp_Init+0x24>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	705a      	strb	r2, [r3, #1]
 8000b9a:	4b04      	ldr	r3, [pc, #16]	; (8000bac <cpmdisp_Init+0x24>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
	drawsymbol(CURSOR_CHAR);
 8000ba0:	205f      	movs	r0, #95	; 0x5f
 8000ba2:	f7ff ff4b 	bl	8000a3c <drawsymbol>
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000020 	.word	0x20000020

08000bb0 <cpmdisp_putc>:

void cpmdisp_putc(char c) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
	if(c == '\n') {
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	2b0a      	cmp	r3, #10
 8000bbe:	d116      	bne.n	8000bee <cpmdisp_putc+0x3e>
		drawsymbol(0x00);
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff ff3b 	bl	8000a3c <drawsymbol>
		cpos[COL]=0;
 8000bc6:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <cpmdisp_putc+0xa0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
		if(++cpos[ROW] >= SCR_HEIGHT) {
 8000bcc:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <cpmdisp_putc+0xa0>)
 8000bce:	785b      	ldrb	r3, [r3, #1]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <cpmdisp_putc+0xa0>)
 8000bd6:	705a      	strb	r2, [r3, #1]
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <cpmdisp_putc+0xa0>)
 8000bda:	785b      	ldrb	r3, [r3, #1]
 8000bdc:	2b18      	cmp	r3, #24
 8000bde:	d930      	bls.n	8000c42 <cpmdisp_putc+0x92>
			cpmdisp_scroll(1);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f7ff ff21 	bl	8000a28 <cpmdisp_scroll>
			cpos[ROW] = SCR_HEIGHT-1;
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <cpmdisp_putc+0xa0>)
 8000be8:	2218      	movs	r2, #24
 8000bea:	705a      	strb	r2, [r3, #1]
 8000bec:	e029      	b.n	8000c42 <cpmdisp_putc+0x92>
		}
	} else {
		//draw symbol
		if(c < 0x20)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b1f      	cmp	r3, #31
 8000bf2:	d802      	bhi.n	8000bfa <cpmdisp_putc+0x4a>
			c = 0x20;
 8000bf4:	2320      	movs	r3, #32
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	e002      	b.n	8000c00 <cpmdisp_putc+0x50>
		else
			c -= 0x20;
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	3b20      	subs	r3, #32
 8000bfe:	71fb      	strb	r3, [r7, #7]

		drawsymbol((uint8_t)c);
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff1a 	bl	8000a3c <drawsymbol>

		if(++cpos[COL] == SCR_WIDTH) {
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <cpmdisp_putc+0xa0>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <cpmdisp_putc+0xa0>)
 8000c12:	701a      	strb	r2, [r3, #0]
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <cpmdisp_putc+0xa0>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b34      	cmp	r3, #52	; 0x34
 8000c1a:	d112      	bne.n	8000c42 <cpmdisp_putc+0x92>
			cpos[COL] = 0;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <cpmdisp_putc+0xa0>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
			if(++cpos[ROW] == SCR_HEIGHT) {
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <cpmdisp_putc+0xa0>)
 8000c24:	785b      	ldrb	r3, [r3, #1]
 8000c26:	3301      	adds	r3, #1
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <cpmdisp_putc+0xa0>)
 8000c2c:	705a      	strb	r2, [r3, #1]
 8000c2e:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <cpmdisp_putc+0xa0>)
 8000c30:	785b      	ldrb	r3, [r3, #1]
 8000c32:	2b19      	cmp	r3, #25
 8000c34:	d105      	bne.n	8000c42 <cpmdisp_putc+0x92>
				cpmdisp_scroll(1);
 8000c36:	2001      	movs	r0, #1
 8000c38:	f7ff fef6 	bl	8000a28 <cpmdisp_scroll>
				cpos[ROW] = SCR_HEIGHT-1;
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <cpmdisp_putc+0xa0>)
 8000c3e:	2218      	movs	r2, #24
 8000c40:	705a      	strb	r2, [r3, #1]
			}
		}
	}
	drawsymbol(CURSOR_CHAR);
 8000c42:	205f      	movs	r0, #95	; 0x5f
 8000c44:	f7ff fefa 	bl	8000a3c <drawsymbol>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20000020 	.word	0x20000020

08000c54 <cpmdisp_puts>:

void cpmdisp_puts(char *s) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	for(uint32_t i;s[i]!='\0';i++)
 8000c5c:	e009      	b.n	8000c72 <cpmdisp_puts+0x1e>
		cpmdisp_putc(s[i]);
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4413      	add	r3, r2
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f7ff ffa2 	bl	8000bb0 <cpmdisp_putc>
	for(uint32_t i;s[i]!='\0';i++)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1ef      	bne.n	8000c5e <cpmdisp_puts+0xa>
}
 8000c7e:	bf00      	nop
 8000c80:	3710      	adds	r7, #16
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
	...

08000c88 <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <LL_DMA_EnableChannel+0x38>)
 8000c98:	5cd3      	ldrb	r3, [r2, r3]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	683a      	ldr	r2, [r7, #0]
 8000ca4:	3a01      	subs	r2, #1
 8000ca6:	4906      	ldr	r1, [pc, #24]	; (8000cc0 <LL_DMA_EnableChannel+0x38>)
 8000ca8:	5c8a      	ldrb	r2, [r1, r2]
 8000caa:	4611      	mov	r1, r2
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	440a      	add	r2, r1
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6013      	str	r3, [r2, #0]
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr
 8000cc0:	08002764 	.word	0x08002764

08000cc4 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <LL_DMA_SetMemoryIncMode+0x40>)
 8000cd6:	5cd3      	ldrb	r3, [r2, r3]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	4413      	add	r3, r2
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	4906      	ldr	r1, [pc, #24]	; (8000d04 <LL_DMA_SetMemoryIncMode+0x40>)
 8000cea:	5ccb      	ldrb	r3, [r1, r3]
 8000cec:	4619      	mov	r1, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	440b      	add	r3, r1
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	08002764 	.word	0x08002764

08000d08 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <LL_DMA_SetDataLength+0x40>)
 8000d1a:	5cd3      	ldrb	r3, [r2, r3]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4413      	add	r3, r2
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	0c1b      	lsrs	r3, r3, #16
 8000d26:	041b      	lsls	r3, r3, #16
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	3a01      	subs	r2, #1
 8000d2c:	4906      	ldr	r1, [pc, #24]	; (8000d48 <LL_DMA_SetDataLength+0x40>)
 8000d2e:	5c8a      	ldrb	r2, [r1, r2]
 8000d30:	4611      	mov	r1, r2
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	440a      	add	r2, r1
 8000d36:	4611      	mov	r1, r2
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	604b      	str	r3, [r1, #4]
             DMA_CNDTR_NDT, NbData);
}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	08002764 	.word	0x08002764

08000d4c <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  MemoryAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryAddress)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	4a06      	ldr	r2, [pc, #24]	; (8000d78 <LL_DMA_SetMemoryAddress+0x2c>)
 8000d5e:	5cd3      	ldrb	r3, [r2, r3]
 8000d60:	461a      	mov	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4413      	add	r3, r2
 8000d66:	461a      	mov	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	60d3      	str	r3, [r2, #12]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	08002764 	.word	0x08002764

08000d7c <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  PeriphAddress Between Min_Data = 0 and Max_Data = 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4a06      	ldr	r2, [pc, #24]	; (8000da8 <LL_DMA_SetPeriphAddress+0x2c>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	461a      	mov	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4413      	add	r3, r2
 8000d96:	461a      	mov	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6093      	str	r3, [r2, #8]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	08002764 	.word	0x08002764

08000dac <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <LL_DMA_EnableIT_TC+0x38>)
 8000dbc:	5cd3      	ldrb	r3, [r2, r3]
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	3a01      	subs	r2, #1
 8000dca:	4906      	ldr	r1, [pc, #24]	; (8000de4 <LL_DMA_EnableIT_TC+0x38>)
 8000dcc:	5c8a      	ldrb	r2, [r1, r2]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	440a      	add	r2, r1
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	6013      	str	r3, [r2, #0]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	08002764 	.word	0x08002764

08000de8 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <LL_DMA_EnableIT_TE+0x38>)
 8000df8:	5cd3      	ldrb	r3, [r2, r3]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4413      	add	r3, r2
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	3a01      	subs	r2, #1
 8000e06:	4906      	ldr	r1, [pc, #24]	; (8000e20 <LL_DMA_EnableIT_TE+0x38>)
 8000e08:	5c8a      	ldrb	r2, [r1, r2]
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	440a      	add	r2, r1
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6013      	str	r3, [r2, #0]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bc80      	pop	{r7}
 8000e1e:	4770      	bx	lr
 8000e20:	08002764 	.word	0x08002764

08000e24 <LL_DMA_DisableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LL_DMA_DisableIT_HT+0x38>)
 8000e34:	5cd3      	ldrb	r3, [r2, r3]
 8000e36:	461a      	mov	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	683a      	ldr	r2, [r7, #0]
 8000e40:	3a01      	subs	r2, #1
 8000e42:	4906      	ldr	r1, [pc, #24]	; (8000e5c <LL_DMA_DisableIT_HT+0x38>)
 8000e44:	5c8a      	ldrb	r2, [r1, r2]
 8000e46:	4611      	mov	r1, r2
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	440a      	add	r2, r1
 8000e4c:	f023 0304 	bic.w	r3, r3, #4
 8000e50:	6013      	str	r3, [r2, #0]
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	08002764 	.word	0x08002764

08000e60 <LL_SPI_Enable>:
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	601a      	str	r2, [r3, #0]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <LL_SPI_SetDataWidth>:
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	431a      	orrs	r2, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	601a      	str	r2, [r3, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr

08000ea2 <LL_SPI_EnableDMAReq_TX>:
  * @rmtoll CR2          TXDMAEN       LL_SPI_EnableDMAReq_TX
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableDMAReq_TX(SPI_TypeDef *SPIx)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f043 0202 	orr.w	r2, r3, #2
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	605a      	str	r2, [r3, #4]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <LL_SPI_DMA_GetRegAddr>:
  * @rmtoll DR           DR            LL_SPI_DMA_GetRegAddr
  * @param  SPIx SPI Instance
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_SPI_DMA_GetRegAddr(SPI_TypeDef *SPIx)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  return (uint32_t) &(SPIx->DR);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	330c      	adds	r3, #12
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bc80      	pop	{r7}
 8000ed4:	4770      	bx	lr

08000ed6 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b085      	sub	sp, #20
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	330c      	adds	r3, #12
 8000ee6:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	78fa      	ldrb	r2, [r7, #3]
 8000eec:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <LL_TIM_EnableCounter>:
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f043 0201 	orr.w	r2, r3, #1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	601a      	str	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr

08000f16 <LL_TIM_CC_EnableChannel>:
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a1a      	ldr	r2, [r3, #32]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	621a      	str	r2, [r3, #32]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <LL_TIM_OC_SetCompareCH2>:
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr

08000f50 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	611a      	str	r2, [r3, #16]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr

08000f6e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	615a      	str	r2, [r3, #20]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <ILI9341_setLEDpwm>:
//	LL_SPI_SetDataWidth(ILI9341_SPI, LL_SPI_DATAWIDTH_8BIT);
//	ILI9341_CS_SET;
//	ILI9341_DMA_busy = 0;
//}

inline static void ILI9341_setLEDpwm(uint16_t val) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
	if(val>999) val=999;
 8000f96:	88fb      	ldrh	r3, [r7, #6]
 8000f98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f9c:	d302      	bcc.n	8000fa4 <ILI9341_setLEDpwm+0x18>
 8000f9e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000fa2:	80fb      	strh	r3, [r7, #6]
	ILI9341_SETLED_PWM(val);
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fac:	f7ff ffc3 	bl	8000f36 <LL_TIM_OC_SetCompareCH2>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <ILI9341_sendCommand>:

#include "ILI9341_driver.h"

uint8_t ILI9341_DMA_busy = 0;

inline static void ILI9341_sendCommand(uint8_t com) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  ILI9341_DC_RESET;
 8000fc2:	f640 0108 	movw	r1, #2056	; 0x808
 8000fc6:	480b      	ldr	r0, [pc, #44]	; (8000ff4 <ILI9341_sendCommand+0x3c>)
 8000fc8:	f7ff ffd1 	bl	8000f6e <LL_GPIO_ResetOutputPin>
  ILI9341_CS_RESET;
 8000fcc:	f241 0110 	movw	r1, #4112	; 0x1010
 8000fd0:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <ILI9341_sendCommand+0x3c>)
 8000fd2:	f7ff ffcc 	bl	8000f6e <LL_GPIO_ResetOutputPin>
  LL_SPI_TransmitData8(ILI9341_SPI, com);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <ILI9341_sendCommand+0x40>)
 8000fdc:	f7ff ff7b 	bl	8000ed6 <LL_SPI_TransmitData8>
  ILI9341_CS_SET;
 8000fe0:	f241 0110 	movw	r1, #4112	; 0x1010
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <ILI9341_sendCommand+0x3c>)
 8000fe6:	f7ff ffb3 	bl	8000f50 <LL_GPIO_SetOutputPin>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	40013000 	.word	0x40013000

08000ffc <ILI9341_sendData>:

inline static void ILI9341_sendData(uint8_t data) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
  ILI9341_DC_SET;
 8001006:	f640 0108 	movw	r1, #2056	; 0x808
 800100a:	480b      	ldr	r0, [pc, #44]	; (8001038 <ILI9341_sendData+0x3c>)
 800100c:	f7ff ffa0 	bl	8000f50 <LL_GPIO_SetOutputPin>
  ILI9341_CS_RESET;
 8001010:	f241 0110 	movw	r1, #4112	; 0x1010
 8001014:	4808      	ldr	r0, [pc, #32]	; (8001038 <ILI9341_sendData+0x3c>)
 8001016:	f7ff ffaa 	bl	8000f6e <LL_GPIO_ResetOutputPin>
  LL_SPI_TransmitData8(ILI9341_SPI, data);
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	4619      	mov	r1, r3
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <ILI9341_sendData+0x40>)
 8001020:	f7ff ff59 	bl	8000ed6 <LL_SPI_TransmitData8>
  ILI9341_CS_SET;
 8001024:	f241 0110 	movw	r1, #4112	; 0x1010
 8001028:	4803      	ldr	r0, [pc, #12]	; (8001038 <ILI9341_sendData+0x3c>)
 800102a:	f7ff ff91 	bl	8000f50 <LL_GPIO_SetOutputPin>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40010800 	.word	0x40010800
 800103c:	40013000 	.word	0x40013000

08001040 <ILI9341_Init>:

void ILI9341_Init() {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
	//turn on periphery used by driver
	LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH2);
 8001044:	2110      	movs	r1, #16
 8001046:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800104a:	f7ff ff64 	bl	8000f16 <LL_TIM_CC_EnableChannel>
	LL_TIM_EnableCounter(TIM2);
 800104e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001052:	f7ff ff51 	bl	8000ef8 <LL_TIM_EnableCounter>
	LL_DMA_SetPeriphAddress(ILI9341_DMA, ILI9341_DMA_TX_CH, LL_SPI_DMA_GetRegAddr(ILI9341_SPI));
 8001056:	488f      	ldr	r0, [pc, #572]	; (8001294 <ILI9341_Init+0x254>)
 8001058:	f7ff ff32 	bl	8000ec0 <LL_SPI_DMA_GetRegAddr>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	2103      	movs	r1, #3
 8001062:	488d      	ldr	r0, [pc, #564]	; (8001298 <ILI9341_Init+0x258>)
 8001064:	f7ff fe8a 	bl	8000d7c <LL_DMA_SetPeriphAddress>
	LL_SPI_Enable(ILI9341_SPI);
 8001068:	488a      	ldr	r0, [pc, #552]	; (8001294 <ILI9341_Init+0x254>)
 800106a:	f7ff fef9 	bl	8000e60 <LL_SPI_Enable>

	//set brightness of backlight
	ILI9341_setLEDpwm(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f7ff ff8c 	bl	8000f8c <ILI9341_setLEDpwm>

	//set CS pin
	ILI9341_CS_SET;
 8001074:	f241 0110 	movw	r1, #4112	; 0x1010
 8001078:	4888      	ldr	r0, [pc, #544]	; (800129c <ILI9341_Init+0x25c>)
 800107a:	f7ff ff69 	bl	8000f50 <LL_GPIO_SetOutputPin>
	ILI9341_DC_SET;
 800107e:	f640 0108 	movw	r1, #2056	; 0x808
 8001082:	4886      	ldr	r0, [pc, #536]	; (800129c <ILI9341_Init+0x25c>)
 8001084:	f7ff ff64 	bl	8000f50 <LL_GPIO_SetOutputPin>

	// сброс дисплея
	LL_mDelay(100);
 8001088:	2064      	movs	r0, #100	; 0x64
 800108a:	f7ff fc9b 	bl	80009c4 <LL_mDelay>
	while(ILI9341_DMA_busy);
 800108e:	bf00      	nop
 8001090:	4b83      	ldr	r3, [pc, #524]	; (80012a0 <ILI9341_Init+0x260>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d1fb      	bne.n	8001090 <ILI9341_Init+0x50>

	/// настраиваем дисплей
	ILI9341_sendCommand(ILI9341_POWERA);
 8001098:	20cb      	movs	r0, #203	; 0xcb
 800109a:	f7ff ff8d 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x39);
 800109e:	2039      	movs	r0, #57	; 0x39
 80010a0:	f7ff ffac 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x2C);
 80010a4:	202c      	movs	r0, #44	; 0x2c
 80010a6:	f7ff ffa9 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x00);
 80010aa:	2000      	movs	r0, #0
 80010ac:	f7ff ffa6 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x34);
 80010b0:	2034      	movs	r0, #52	; 0x34
 80010b2:	f7ff ffa3 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x02);
 80010b6:	2002      	movs	r0, #2
 80010b8:	f7ff ffa0 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_POWERB);
 80010bc:	20cf      	movs	r0, #207	; 0xcf
 80010be:	f7ff ff7b 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x00);
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff ff9a 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0xC1);
 80010c8:	20c1      	movs	r0, #193	; 0xc1
 80010ca:	f7ff ff97 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x30);
 80010ce:	2030      	movs	r0, #48	; 0x30
 80010d0:	f7ff ff94 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_DTCA);
 80010d4:	20e8      	movs	r0, #232	; 0xe8
 80010d6:	f7ff ff6f 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x85);
 80010da:	2085      	movs	r0, #133	; 0x85
 80010dc:	f7ff ff8e 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x00);
 80010e0:	2000      	movs	r0, #0
 80010e2:	f7ff ff8b 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x78);
 80010e6:	2078      	movs	r0, #120	; 0x78
 80010e8:	f7ff ff88 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_DTCB);
 80010ec:	20ea      	movs	r0, #234	; 0xea
 80010ee:	f7ff ff63 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x00);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff ff82 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x00);
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff ff7f 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_POWER_SEQ);
 80010fe:	20ed      	movs	r0, #237	; 0xed
 8001100:	f7ff ff5a 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x64);
 8001104:	2064      	movs	r0, #100	; 0x64
 8001106:	f7ff ff79 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x03);
 800110a:	2003      	movs	r0, #3
 800110c:	f7ff ff76 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x12);
 8001110:	2012      	movs	r0, #18
 8001112:	f7ff ff73 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x81);
 8001116:	2081      	movs	r0, #129	; 0x81
 8001118:	f7ff ff70 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_PRC);
 800111c:	20f7      	movs	r0, #247	; 0xf7
 800111e:	f7ff ff4b 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x20);
 8001122:	2020      	movs	r0, #32
 8001124:	f7ff ff6a 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_POWER1);
 8001128:	20c0      	movs	r0, #192	; 0xc0
 800112a:	f7ff ff45 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x23);
 800112e:	2023      	movs	r0, #35	; 0x23
 8001130:	f7ff ff64 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_POWER2);
 8001134:	20c1      	movs	r0, #193	; 0xc1
 8001136:	f7ff ff3f 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x10);
 800113a:	2010      	movs	r0, #16
 800113c:	f7ff ff5e 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_VCOM1);
 8001140:	20c5      	movs	r0, #197	; 0xc5
 8001142:	f7ff ff39 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x3E);
 8001146:	203e      	movs	r0, #62	; 0x3e
 8001148:	f7ff ff58 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x28);
 800114c:	2028      	movs	r0, #40	; 0x28
 800114e:	f7ff ff55 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_VCOM2);
 8001152:	20c7      	movs	r0, #199	; 0xc7
 8001154:	f7ff ff30 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x86);
 8001158:	2086      	movs	r0, #134	; 0x86
 800115a:	f7ff ff4f 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_MAC);//set orientation
 800115e:	2036      	movs	r0, #54	; 0x36
 8001160:	f7ff ff2a 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(ORIENTATION_LANDSCAPE_MIRROR);
 8001164:	20e8      	movs	r0, #232	; 0xe8
 8001166:	f7ff ff49 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_PIXEL_FORMAT);
 800116a:	203a      	movs	r0, #58	; 0x3a
 800116c:	f7ff ff24 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x55);
 8001170:	2055      	movs	r0, #85	; 0x55
 8001172:	f7ff ff43 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_FRMCTR1);
 8001176:	20b1      	movs	r0, #177	; 0xb1
 8001178:	f7ff ff1e 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x00);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff ff3d 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x18);
 8001182:	2018      	movs	r0, #24
 8001184:	f7ff ff3a 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_DFC);
 8001188:	20b6      	movs	r0, #182	; 0xb6
 800118a:	f7ff ff15 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x08);
 800118e:	2008      	movs	r0, #8
 8001190:	f7ff ff34 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x82);
 8001194:	2082      	movs	r0, #130	; 0x82
 8001196:	f7ff ff31 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x27);
 800119a:	2027      	movs	r0, #39	; 0x27
 800119c:	f7ff ff2e 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_3GAMMA_EN);
 80011a0:	20f2      	movs	r0, #242	; 0xf2
 80011a2:	f7ff ff09 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x00);
 80011a6:	2000      	movs	r0, #0
 80011a8:	f7ff ff28 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_GAMMA);
 80011ac:	2026      	movs	r0, #38	; 0x26
 80011ae:	f7ff ff03 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x01);
 80011b2:	2001      	movs	r0, #1
 80011b4:	f7ff ff22 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_PGAMMA);
 80011b8:	20e0      	movs	r0, #224	; 0xe0
 80011ba:	f7ff fefd 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x0F);
 80011be:	200f      	movs	r0, #15
 80011c0:	f7ff ff1c 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x31);
 80011c4:	2031      	movs	r0, #49	; 0x31
 80011c6:	f7ff ff19 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x2B);
 80011ca:	202b      	movs	r0, #43	; 0x2b
 80011cc:	f7ff ff16 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x0C);
 80011d0:	200c      	movs	r0, #12
 80011d2:	f7ff ff13 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x0E);
 80011d6:	200e      	movs	r0, #14
 80011d8:	f7ff ff10 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x08);
 80011dc:	2008      	movs	r0, #8
 80011de:	f7ff ff0d 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x4E);
 80011e2:	204e      	movs	r0, #78	; 0x4e
 80011e4:	f7ff ff0a 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0xF1);
 80011e8:	20f1      	movs	r0, #241	; 0xf1
 80011ea:	f7ff ff07 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x37);
 80011ee:	2037      	movs	r0, #55	; 0x37
 80011f0:	f7ff ff04 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x07);
 80011f4:	2007      	movs	r0, #7
 80011f6:	f7ff ff01 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x10);
 80011fa:	2010      	movs	r0, #16
 80011fc:	f7ff fefe 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x03);
 8001200:	2003      	movs	r0, #3
 8001202:	f7ff fefb 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x0E);
 8001206:	200e      	movs	r0, #14
 8001208:	f7ff fef8 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x09);
 800120c:	2009      	movs	r0, #9
 800120e:	f7ff fef5 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x00);
 8001212:	2000      	movs	r0, #0
 8001214:	f7ff fef2 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_NGAMMA);
 8001218:	20e1      	movs	r0, #225	; 0xe1
 800121a:	f7ff fecd 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendData(0x00);
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff feec 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x0E);
 8001224:	200e      	movs	r0, #14
 8001226:	f7ff fee9 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x14);
 800122a:	2014      	movs	r0, #20
 800122c:	f7ff fee6 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x03);
 8001230:	2003      	movs	r0, #3
 8001232:	f7ff fee3 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x11);
 8001236:	2011      	movs	r0, #17
 8001238:	f7ff fee0 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x07);
 800123c:	2007      	movs	r0, #7
 800123e:	f7ff fedd 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x31);
 8001242:	2031      	movs	r0, #49	; 0x31
 8001244:	f7ff feda 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0xC1);
 8001248:	20c1      	movs	r0, #193	; 0xc1
 800124a:	f7ff fed7 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x48);
 800124e:	2048      	movs	r0, #72	; 0x48
 8001250:	f7ff fed4 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x08);
 8001254:	2008      	movs	r0, #8
 8001256:	f7ff fed1 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x0F);
 800125a:	200f      	movs	r0, #15
 800125c:	f7ff fece 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x0C);
 8001260:	200c      	movs	r0, #12
 8001262:	f7ff fecb 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x31);
 8001266:	2031      	movs	r0, #49	; 0x31
 8001268:	f7ff fec8 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x36);
 800126c:	2036      	movs	r0, #54	; 0x36
 800126e:	f7ff fec5 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendData(0x0F);
 8001272:	200f      	movs	r0, #15
 8001274:	f7ff fec2 	bl	8000ffc <ILI9341_sendData>
	ILI9341_sendCommand(ILI9341_SLEEP_OUT);
 8001278:	2011      	movs	r0, #17
 800127a:	f7ff fe9d 	bl	8000fb8 <ILI9341_sendCommand>

	LL_mDelay(100);
 800127e:	2064      	movs	r0, #100	; 0x64
 8001280:	f7ff fba0 	bl	80009c4 <LL_mDelay>
	ILI9341_sendCommand(ILI9341_DISPLAY_ON);
 8001284:	2029      	movs	r0, #41	; 0x29
 8001286:	f7ff fe97 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_sendCommand(ILI9341_GRAM);
 800128a:	202c      	movs	r0, #44	; 0x2c
 800128c:	f7ff fe94 	bl	8000fb8 <ILI9341_sendCommand>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40013000 	.word	0x40013000
 8001298:	40020000 	.word	0x40020000
 800129c:	40010800 	.word	0x40010800
 80012a0:	20000022 	.word	0x20000022

080012a4 <ILI9341_setFrame>:

void ILI9341_setFrame(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4604      	mov	r4, r0
 80012ac:	4608      	mov	r0, r1
 80012ae:	4611      	mov	r1, r2
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	80fb      	strh	r3, [r7, #6]
 80012b6:	4603      	mov	r3, r0
 80012b8:	80bb      	strh	r3, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	807b      	strh	r3, [r7, #2]
 80012be:	4613      	mov	r3, r2
 80012c0:	803b      	strh	r3, [r7, #0]
	while(ILI9341_DMA_busy);
 80012c2:	bf00      	nop
 80012c4:	4b31      	ldr	r3, [pc, #196]	; (800138c <ILI9341_setFrame+0xe8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1fb      	bne.n	80012c4 <ILI9341_setFrame+0x20>
	ILI9341_sendCommand(ILI9341_COLUMN_ADDR);
 80012cc:	202a      	movs	r0, #42	; 0x2a
 80012ce:	f7ff fe73 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_DC_SET;
 80012d2:	f640 0108 	movw	r1, #2056	; 0x808
 80012d6:	482e      	ldr	r0, [pc, #184]	; (8001390 <ILI9341_setFrame+0xec>)
 80012d8:	f7ff fe3a 	bl	8000f50 <LL_GPIO_SetOutputPin>
	ILI9341_CS_RESET;
 80012dc:	f241 0110 	movw	r1, #4112	; 0x1010
 80012e0:	482b      	ldr	r0, [pc, #172]	; (8001390 <ILI9341_setFrame+0xec>)
 80012e2:	f7ff fe44 	bl	8000f6e <LL_GPIO_ResetOutputPin>
	LL_SPI_TransmitData8(ILI9341_SPI, x1 >> 8);
 80012e6:	88fb      	ldrh	r3, [r7, #6]
 80012e8:	0a1b      	lsrs	r3, r3, #8
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4619      	mov	r1, r3
 80012f0:	4828      	ldr	r0, [pc, #160]	; (8001394 <ILI9341_setFrame+0xf0>)
 80012f2:	f7ff fdf0 	bl	8000ed6 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(ILI9341_SPI, x1 & 0xFF);
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	4619      	mov	r1, r3
 80012fc:	4825      	ldr	r0, [pc, #148]	; (8001394 <ILI9341_setFrame+0xf0>)
 80012fe:	f7ff fdea 	bl	8000ed6 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(ILI9341_SPI, x2 >> 8);
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	b29b      	uxth	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4619      	mov	r1, r3
 800130c:	4821      	ldr	r0, [pc, #132]	; (8001394 <ILI9341_setFrame+0xf0>)
 800130e:	f7ff fde2 	bl	8000ed6 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(ILI9341_SPI, x2 & 0xFF);
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	b2db      	uxtb	r3, r3
 8001316:	4619      	mov	r1, r3
 8001318:	481e      	ldr	r0, [pc, #120]	; (8001394 <ILI9341_setFrame+0xf0>)
 800131a:	f7ff fddc 	bl	8000ed6 <LL_SPI_TransmitData8>
	ILI9341_CS_SET;
 800131e:	f241 0110 	movw	r1, #4112	; 0x1010
 8001322:	481b      	ldr	r0, [pc, #108]	; (8001390 <ILI9341_setFrame+0xec>)
 8001324:	f7ff fe14 	bl	8000f50 <LL_GPIO_SetOutputPin>

	ILI9341_sendCommand(ILI9341_PAGE_ADDR);
 8001328:	202b      	movs	r0, #43	; 0x2b
 800132a:	f7ff fe45 	bl	8000fb8 <ILI9341_sendCommand>
	ILI9341_DC_SET;
 800132e:	f640 0108 	movw	r1, #2056	; 0x808
 8001332:	4817      	ldr	r0, [pc, #92]	; (8001390 <ILI9341_setFrame+0xec>)
 8001334:	f7ff fe0c 	bl	8000f50 <LL_GPIO_SetOutputPin>
	ILI9341_CS_RESET;
 8001338:	f241 0110 	movw	r1, #4112	; 0x1010
 800133c:	4814      	ldr	r0, [pc, #80]	; (8001390 <ILI9341_setFrame+0xec>)
 800133e:	f7ff fe16 	bl	8000f6e <LL_GPIO_ResetOutputPin>
	LL_SPI_TransmitData8(ILI9341_SPI, y1 >> 8);
 8001342:	88bb      	ldrh	r3, [r7, #4]
 8001344:	0a1b      	lsrs	r3, r3, #8
 8001346:	b29b      	uxth	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	4619      	mov	r1, r3
 800134c:	4811      	ldr	r0, [pc, #68]	; (8001394 <ILI9341_setFrame+0xf0>)
 800134e:	f7ff fdc2 	bl	8000ed6 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(ILI9341_SPI, y1 & 0xFF);
 8001352:	88bb      	ldrh	r3, [r7, #4]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4619      	mov	r1, r3
 8001358:	480e      	ldr	r0, [pc, #56]	; (8001394 <ILI9341_setFrame+0xf0>)
 800135a:	f7ff fdbc 	bl	8000ed6 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(ILI9341_SPI, y2 >> 8);
 800135e:	883b      	ldrh	r3, [r7, #0]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	b29b      	uxth	r3, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	4619      	mov	r1, r3
 8001368:	480a      	ldr	r0, [pc, #40]	; (8001394 <ILI9341_setFrame+0xf0>)
 800136a:	f7ff fdb4 	bl	8000ed6 <LL_SPI_TransmitData8>
	LL_SPI_TransmitData8(ILI9341_SPI, y2 & 0xFF);
 800136e:	883b      	ldrh	r3, [r7, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4619      	mov	r1, r3
 8001374:	4807      	ldr	r0, [pc, #28]	; (8001394 <ILI9341_setFrame+0xf0>)
 8001376:	f7ff fdae 	bl	8000ed6 <LL_SPI_TransmitData8>
	ILI9341_CS_SET;
 800137a:	f241 0110 	movw	r1, #4112	; 0x1010
 800137e:	4804      	ldr	r0, [pc, #16]	; (8001390 <ILI9341_setFrame+0xec>)
 8001380:	f7ff fde6 	bl	8000f50 <LL_GPIO_SetOutputPin>
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bd90      	pop	{r4, r7, pc}
 800138c:	20000022 	.word	0x20000022
 8001390:	40010800 	.word	0x40010800
 8001394:	40013000 	.word	0x40013000

08001398 <ILI9341_sendBuf>:

void ILI9341_sendBuf(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t *data, uint16_t len) {
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4604      	mov	r4, r0
 80013a0:	4608      	mov	r0, r1
 80013a2:	4611      	mov	r1, r2
 80013a4:	461a      	mov	r2, r3
 80013a6:	4623      	mov	r3, r4
 80013a8:	80fb      	strh	r3, [r7, #6]
 80013aa:	4603      	mov	r3, r0
 80013ac:	80bb      	strh	r3, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	807b      	strh	r3, [r7, #2]
 80013b2:	4613      	mov	r3, r2
 80013b4:	803b      	strh	r3, [r7, #0]
	while(ILI9341_DMA_busy);
 80013b6:	bf00      	nop
 80013b8:	4b26      	ldr	r3, [pc, #152]	; (8001454 <ILI9341_sendBuf+0xbc>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1fb      	bne.n	80013b8 <ILI9341_sendBuf+0x20>

	ILI9341_setFrame(x1, y1, x2, y2);
 80013c0:	883b      	ldrh	r3, [r7, #0]
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	88b9      	ldrh	r1, [r7, #4]
 80013c6:	88f8      	ldrh	r0, [r7, #6]
 80013c8:	f7ff ff6c 	bl	80012a4 <ILI9341_setFrame>
	ILI9341_CS_RESET;
 80013cc:	f241 0110 	movw	r1, #4112	; 0x1010
 80013d0:	4821      	ldr	r0, [pc, #132]	; (8001458 <ILI9341_sendBuf+0xc0>)
 80013d2:	f7ff fdcc 	bl	8000f6e <LL_GPIO_ResetOutputPin>
	ILI9341_DC_RESET;
 80013d6:	f640 0108 	movw	r1, #2056	; 0x808
 80013da:	481f      	ldr	r0, [pc, #124]	; (8001458 <ILI9341_sendBuf+0xc0>)
 80013dc:	f7ff fdc7 	bl	8000f6e <LL_GPIO_ResetOutputPin>
	LL_SPI_TransmitData8(ILI9341_SPI, ILI9341_GRAM);
 80013e0:	212c      	movs	r1, #44	; 0x2c
 80013e2:	481e      	ldr	r0, [pc, #120]	; (800145c <ILI9341_sendBuf+0xc4>)
 80013e4:	f7ff fd77 	bl	8000ed6 <LL_SPI_TransmitData8>
	ILI9341_DC_SET;
 80013e8:	f640 0108 	movw	r1, #2056	; 0x808
 80013ec:	481a      	ldr	r0, [pc, #104]	; (8001458 <ILI9341_sendBuf+0xc0>)
 80013ee:	f7ff fdaf 	bl	8000f50 <LL_GPIO_SetOutputPin>

	LL_SPI_SetDataWidth(ILI9341_SPI, LL_SPI_DATAWIDTH_16BIT);
 80013f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013f6:	4819      	ldr	r0, [pc, #100]	; (800145c <ILI9341_sendBuf+0xc4>)
 80013f8:	f7ff fd41 	bl	8000e7e <LL_SPI_SetDataWidth>
	LL_DMA_SetMemoryAddress(ILI9341_DMA, ILI9341_DMA_TX_CH, (uint32_t)data);
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	461a      	mov	r2, r3
 8001400:	2103      	movs	r1, #3
 8001402:	4817      	ldr	r0, [pc, #92]	; (8001460 <ILI9341_sendBuf+0xc8>)
 8001404:	f7ff fca2 	bl	8000d4c <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(ILI9341_DMA, ILI9341_DMA_TX_CH, len);
 8001408:	8bbb      	ldrh	r3, [r7, #28]
 800140a:	461a      	mov	r2, r3
 800140c:	2103      	movs	r1, #3
 800140e:	4814      	ldr	r0, [pc, #80]	; (8001460 <ILI9341_sendBuf+0xc8>)
 8001410:	f7ff fc7a 	bl	8000d08 <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryIncMode(ILI9341_DMA, ILI9341_DMA_TX_CH, LL_DMA_MEMORY_INCREMENT);
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	2103      	movs	r1, #3
 8001418:	4811      	ldr	r0, [pc, #68]	; (8001460 <ILI9341_sendBuf+0xc8>)
 800141a:	f7ff fc53 	bl	8000cc4 <LL_DMA_SetMemoryIncMode>
	LL_DMA_DisableIT_HT(ILI9341_DMA, ILI9341_DMA_TX_CH);
 800141e:	2103      	movs	r1, #3
 8001420:	480f      	ldr	r0, [pc, #60]	; (8001460 <ILI9341_sendBuf+0xc8>)
 8001422:	f7ff fcff 	bl	8000e24 <LL_DMA_DisableIT_HT>
	LL_DMA_EnableIT_TC(ILI9341_DMA, ILI9341_DMA_TX_CH);
 8001426:	2103      	movs	r1, #3
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <ILI9341_sendBuf+0xc8>)
 800142a:	f7ff fcbf 	bl	8000dac <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(ILI9341_DMA, ILI9341_DMA_TX_CH);
 800142e:	2103      	movs	r1, #3
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <ILI9341_sendBuf+0xc8>)
 8001432:	f7ff fcd9 	bl	8000de8 <LL_DMA_EnableIT_TE>
	LL_SPI_EnableDMAReq_TX(ILI9341_SPI);
 8001436:	4809      	ldr	r0, [pc, #36]	; (800145c <ILI9341_sendBuf+0xc4>)
 8001438:	f7ff fd33 	bl	8000ea2 <LL_SPI_EnableDMAReq_TX>
	LL_DMA_EnableChannel(ILI9341_DMA, ILI9341_DMA_TX_CH);
 800143c:	2103      	movs	r1, #3
 800143e:	4808      	ldr	r0, [pc, #32]	; (8001460 <ILI9341_sendBuf+0xc8>)
 8001440:	f7ff fc22 	bl	8000c88 <LL_DMA_EnableChannel>

	ILI9341_DMA_busy = 1;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <ILI9341_sendBuf+0xbc>)
 8001446:	2201      	movs	r2, #1
 8001448:	701a      	strb	r2, [r3, #0]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bd90      	pop	{r4, r7, pc}
 8001452:	bf00      	nop
 8001454:	20000022 	.word	0x20000022
 8001458:	40010800 	.word	0x40010800
 800145c:	40013000 	.word	0x40013000
 8001460:	40020000 	.word	0x40020000

08001464 <ILI9341_fillArea>:
//TODO --
}

static uint16_t fcolor;

void ILI9341_fillArea(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) {
 8001464:	b590      	push	{r4, r7, lr}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	4604      	mov	r4, r0
 800146c:	4608      	mov	r0, r1
 800146e:	4611      	mov	r1, r2
 8001470:	461a      	mov	r2, r3
 8001472:	4623      	mov	r3, r4
 8001474:	80fb      	strh	r3, [r7, #6]
 8001476:	4603      	mov	r3, r0
 8001478:	80bb      	strh	r3, [r7, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	807b      	strh	r3, [r7, #2]
 800147e:	4613      	mov	r3, r2
 8001480:	803b      	strh	r3, [r7, #0]
	while(ILI9341_DMA_busy);
 8001482:	bf00      	nop
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <ILI9341_fillArea+0xdc>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1fb      	bne.n	8001484 <ILI9341_fillArea+0x20>
	uint16_t len = (x2-x1+1)*(y2-y1+1);
 800148c:	887a      	ldrh	r2, [r7, #2]
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	3301      	adds	r3, #1
 8001494:	b29b      	uxth	r3, r3
 8001496:	8839      	ldrh	r1, [r7, #0]
 8001498:	88ba      	ldrh	r2, [r7, #4]
 800149a:	1a8a      	subs	r2, r1, r2
 800149c:	3201      	adds	r2, #1
 800149e:	b292      	uxth	r2, r2
 80014a0:	fb02 f303 	mul.w	r3, r2, r3
 80014a4:	81fb      	strh	r3, [r7, #14]
	fcolor = color;
 80014a6:	4a27      	ldr	r2, [pc, #156]	; (8001544 <ILI9341_fillArea+0xe0>)
 80014a8:	8c3b      	ldrh	r3, [r7, #32]
 80014aa:	8013      	strh	r3, [r2, #0]

	ILI9341_setFrame(x1, y1, x2, y2);
 80014ac:	883b      	ldrh	r3, [r7, #0]
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	88b9      	ldrh	r1, [r7, #4]
 80014b2:	88f8      	ldrh	r0, [r7, #6]
 80014b4:	f7ff fef6 	bl	80012a4 <ILI9341_setFrame>
	ILI9341_CS_RESET;
 80014b8:	f241 0110 	movw	r1, #4112	; 0x1010
 80014bc:	4822      	ldr	r0, [pc, #136]	; (8001548 <ILI9341_fillArea+0xe4>)
 80014be:	f7ff fd56 	bl	8000f6e <LL_GPIO_ResetOutputPin>
	ILI9341_DC_RESET;
 80014c2:	f640 0108 	movw	r1, #2056	; 0x808
 80014c6:	4820      	ldr	r0, [pc, #128]	; (8001548 <ILI9341_fillArea+0xe4>)
 80014c8:	f7ff fd51 	bl	8000f6e <LL_GPIO_ResetOutputPin>
	LL_SPI_TransmitData8(ILI9341_SPI, ILI9341_GRAM);
 80014cc:	212c      	movs	r1, #44	; 0x2c
 80014ce:	481f      	ldr	r0, [pc, #124]	; (800154c <ILI9341_fillArea+0xe8>)
 80014d0:	f7ff fd01 	bl	8000ed6 <LL_SPI_TransmitData8>
	ILI9341_DC_SET;
 80014d4:	f640 0108 	movw	r1, #2056	; 0x808
 80014d8:	481b      	ldr	r0, [pc, #108]	; (8001548 <ILI9341_fillArea+0xe4>)
 80014da:	f7ff fd39 	bl	8000f50 <LL_GPIO_SetOutputPin>

	LL_SPI_SetDataWidth(ILI9341_SPI, LL_SPI_DATAWIDTH_16BIT);
 80014de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e2:	481a      	ldr	r0, [pc, #104]	; (800154c <ILI9341_fillArea+0xe8>)
 80014e4:	f7ff fccb 	bl	8000e7e <LL_SPI_SetDataWidth>
	LL_DMA_SetMemoryAddress(ILI9341_DMA, ILI9341_DMA_TX_CH, (uint32_t)&fcolor);
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <ILI9341_fillArea+0xe0>)
 80014ea:	461a      	mov	r2, r3
 80014ec:	2103      	movs	r1, #3
 80014ee:	4818      	ldr	r0, [pc, #96]	; (8001550 <ILI9341_fillArea+0xec>)
 80014f0:	f7ff fc2c 	bl	8000d4c <LL_DMA_SetMemoryAddress>
	LL_DMA_SetDataLength(ILI9341_DMA, ILI9341_DMA_TX_CH, len);
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	461a      	mov	r2, r3
 80014f8:	2103      	movs	r1, #3
 80014fa:	4815      	ldr	r0, [pc, #84]	; (8001550 <ILI9341_fillArea+0xec>)
 80014fc:	f7ff fc04 	bl	8000d08 <LL_DMA_SetDataLength>
	LL_DMA_SetMemoryIncMode(ILI9341_DMA, ILI9341_DMA_TX_CH, LL_DMA_MEMORY_NOINCREMENT);
 8001500:	2200      	movs	r2, #0
 8001502:	2103      	movs	r1, #3
 8001504:	4812      	ldr	r0, [pc, #72]	; (8001550 <ILI9341_fillArea+0xec>)
 8001506:	f7ff fbdd 	bl	8000cc4 <LL_DMA_SetMemoryIncMode>
	LL_DMA_DisableIT_HT(ILI9341_DMA, ILI9341_DMA_TX_CH);
 800150a:	2103      	movs	r1, #3
 800150c:	4810      	ldr	r0, [pc, #64]	; (8001550 <ILI9341_fillArea+0xec>)
 800150e:	f7ff fc89 	bl	8000e24 <LL_DMA_DisableIT_HT>
	LL_DMA_EnableIT_TC(ILI9341_DMA, ILI9341_DMA_TX_CH);
 8001512:	2103      	movs	r1, #3
 8001514:	480e      	ldr	r0, [pc, #56]	; (8001550 <ILI9341_fillArea+0xec>)
 8001516:	f7ff fc49 	bl	8000dac <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_TE(ILI9341_DMA, ILI9341_DMA_TX_CH);
 800151a:	2103      	movs	r1, #3
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <ILI9341_fillArea+0xec>)
 800151e:	f7ff fc63 	bl	8000de8 <LL_DMA_EnableIT_TE>
	LL_SPI_EnableDMAReq_TX(ILI9341_SPI);
 8001522:	480a      	ldr	r0, [pc, #40]	; (800154c <ILI9341_fillArea+0xe8>)
 8001524:	f7ff fcbd 	bl	8000ea2 <LL_SPI_EnableDMAReq_TX>
	LL_DMA_EnableChannel(ILI9341_DMA, ILI9341_DMA_TX_CH);
 8001528:	2103      	movs	r1, #3
 800152a:	4809      	ldr	r0, [pc, #36]	; (8001550 <ILI9341_fillArea+0xec>)
 800152c:	f7ff fbac 	bl	8000c88 <LL_DMA_EnableChannel>

	ILI9341_DMA_busy = 1;
 8001530:	4b03      	ldr	r3, [pc, #12]	; (8001540 <ILI9341_fillArea+0xdc>)
 8001532:	2201      	movs	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	bf00      	nop
 8001540:	20000022 	.word	0x20000022
 8001544:	20000024 	.word	0x20000024
 8001548:	40010800 	.word	0x40010800
 800154c:	40013000 	.word	0x40013000
 8001550:	40020000 	.word	0x40020000

08001554 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001570:	4013      	ands	r3, r2
 8001572:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800157c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001580:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001584:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001586:	4a04      	ldr	r2, [pc, #16]	; (8001598 <__NVIC_SetPriorityGrouping+0x44>)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	60d3      	str	r3, [r2, #12]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <__NVIC_GetPriorityGrouping+0x18>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	0a1b      	lsrs	r3, r3, #8
 80015a6:	f003 0307 	and.w	r3, r3, #7
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db0b      	blt.n	80015e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	f003 021f 	and.w	r2, r3, #31
 80015d0:	4906      	ldr	r1, [pc, #24]	; (80015ec <__NVIC_EnableIRQ+0x34>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	095b      	lsrs	r3, r3, #5
 80015d8:	2001      	movs	r0, #1
 80015da:	fa00 f202 	lsl.w	r2, r0, r2
 80015de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015e2:	bf00      	nop
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100

080015f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	db0a      	blt.n	800161a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	b2da      	uxtb	r2, r3
 8001608:	490c      	ldr	r1, [pc, #48]	; (800163c <__NVIC_SetPriority+0x4c>)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	0112      	lsls	r2, r2, #4
 8001610:	b2d2      	uxtb	r2, r2
 8001612:	440b      	add	r3, r1
 8001614:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001618:	e00a      	b.n	8001630 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	4908      	ldr	r1, [pc, #32]	; (8001640 <__NVIC_SetPriority+0x50>)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	f003 030f 	and.w	r3, r3, #15
 8001626:	3b04      	subs	r3, #4
 8001628:	0112      	lsls	r2, r2, #4
 800162a:	b2d2      	uxtb	r2, r2
 800162c:	440b      	add	r3, r1
 800162e:	761a      	strb	r2, [r3, #24]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	e000e100 	.word	0xe000e100
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001644:	b480      	push	{r7}
 8001646:	b089      	sub	sp, #36	; 0x24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	60b9      	str	r1, [r7, #8]
 800164e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	f1c3 0307 	rsb	r3, r3, #7
 800165e:	2b04      	cmp	r3, #4
 8001660:	bf28      	it	cs
 8001662:	2304      	movcs	r3, #4
 8001664:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3304      	adds	r3, #4
 800166a:	2b06      	cmp	r3, #6
 800166c:	d902      	bls.n	8001674 <NVIC_EncodePriority+0x30>
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3b03      	subs	r3, #3
 8001672:	e000      	b.n	8001676 <NVIC_EncodePriority+0x32>
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	f04f 32ff 	mov.w	r2, #4294967295
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	43da      	mvns	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	401a      	ands	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	fa01 f303 	lsl.w	r3, r1, r3
 8001696:	43d9      	mvns	r1, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800169c:	4313      	orrs	r3, r2
         );
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3724      	adds	r7, #36	; 0x24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <LL_DMA_SetDataTransferDirection>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <LL_DMA_SetDataTransferDirection+0x44>)
 80016ba:	5cd3      	ldrb	r3, [r2, r3]
 80016bc:	461a      	mov	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4413      	add	r3, r2
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016c8:	f023 0310 	bic.w	r3, r3, #16
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	3a01      	subs	r2, #1
 80016d0:	4906      	ldr	r1, [pc, #24]	; (80016ec <LL_DMA_SetDataTransferDirection+0x44>)
 80016d2:	5c8a      	ldrb	r2, [r1, r2]
 80016d4:	4611      	mov	r1, r2
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	440a      	add	r2, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4313      	orrs	r3, r2
 80016e0:	600b      	str	r3, [r1, #0]
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	0800276c 	.word	0x0800276c

080016f0 <LL_DMA_SetMode>:
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	3b01      	subs	r3, #1
 8001700:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <LL_DMA_SetMode+0x40>)
 8001702:	5cd3      	ldrb	r3, [r2, r3]
 8001704:	461a      	mov	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 0220 	bic.w	r2, r3, #32
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	3b01      	subs	r3, #1
 8001714:	4906      	ldr	r1, [pc, #24]	; (8001730 <LL_DMA_SetMode+0x40>)
 8001716:	5ccb      	ldrb	r3, [r1, r3]
 8001718:	4619      	mov	r1, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	440b      	add	r3, r1
 800171e:	4619      	mov	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr
 8001730:	0800276c 	.word	0x0800276c

08001734 <LL_DMA_SetPeriphIncMode>:
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	3b01      	subs	r3, #1
 8001744:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <LL_DMA_SetPeriphIncMode+0x40>)
 8001746:	5cd3      	ldrb	r3, [r2, r3]
 8001748:	461a      	mov	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4413      	add	r3, r2
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	3b01      	subs	r3, #1
 8001758:	4906      	ldr	r1, [pc, #24]	; (8001774 <LL_DMA_SetPeriphIncMode+0x40>)
 800175a:	5ccb      	ldrb	r3, [r1, r3]
 800175c:	4619      	mov	r1, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	440b      	add	r3, r1
 8001762:	4619      	mov	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
}
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr
 8001774:	0800276c 	.word	0x0800276c

08001778 <LL_DMA_SetMemoryIncMode>:
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	3b01      	subs	r3, #1
 8001788:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <LL_DMA_SetMemoryIncMode+0x40>)
 800178a:	5cd3      	ldrb	r3, [r2, r3]
 800178c:	461a      	mov	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	3b01      	subs	r3, #1
 800179c:	4906      	ldr	r1, [pc, #24]	; (80017b8 <LL_DMA_SetMemoryIncMode+0x40>)
 800179e:	5ccb      	ldrb	r3, [r1, r3]
 80017a0:	4619      	mov	r1, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	440b      	add	r3, r1
 80017a6:	4619      	mov	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	600b      	str	r3, [r1, #0]
}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr
 80017b8:	0800276c 	.word	0x0800276c

080017bc <LL_DMA_SetPeriphSize>:
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <LL_DMA_SetPeriphSize+0x40>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	461a      	mov	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4413      	add	r3, r2
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	3b01      	subs	r3, #1
 80017e0:	4906      	ldr	r1, [pc, #24]	; (80017fc <LL_DMA_SetPeriphSize+0x40>)
 80017e2:	5ccb      	ldrb	r3, [r1, r3]
 80017e4:	4619      	mov	r1, r3
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	440b      	add	r3, r1
 80017ea:	4619      	mov	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	0800276c 	.word	0x0800276c

08001800 <LL_DMA_SetMemorySize>:
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	3b01      	subs	r3, #1
 8001810:	4a0b      	ldr	r2, [pc, #44]	; (8001840 <LL_DMA_SetMemorySize+0x40>)
 8001812:	5cd3      	ldrb	r3, [r2, r3]
 8001814:	461a      	mov	r2, r3
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4413      	add	r3, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	3b01      	subs	r3, #1
 8001824:	4906      	ldr	r1, [pc, #24]	; (8001840 <LL_DMA_SetMemorySize+0x40>)
 8001826:	5ccb      	ldrb	r3, [r1, r3]
 8001828:	4619      	mov	r1, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	440b      	add	r3, r1
 800182e:	4619      	mov	r1, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4313      	orrs	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	0800276c 	.word	0x0800276c

08001844 <LL_DMA_SetChannelPriorityLevel>:
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	3b01      	subs	r3, #1
 8001854:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <LL_DMA_SetChannelPriorityLevel+0x40>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	461a      	mov	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	4413      	add	r3, r2
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	3b01      	subs	r3, #1
 8001868:	4906      	ldr	r1, [pc, #24]	; (8001884 <LL_DMA_SetChannelPriorityLevel+0x40>)
 800186a:	5ccb      	ldrb	r3, [r1, r3]
 800186c:	4619      	mov	r1, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	440b      	add	r3, r1
 8001872:	4619      	mov	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]
}
 800187a:	bf00      	nop
 800187c:	3714      	adds	r7, #20
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	0800276c 	.word	0x0800276c

08001888 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800188c:	4b04      	ldr	r3, [pc, #16]	; (80018a0 <LL_RCC_HSE_Enable+0x18>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a03      	ldr	r2, [pc, #12]	; (80018a0 <LL_RCC_HSE_Enable+0x18>)
 8001892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	40021000 	.word	0x40021000

080018a4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <LL_RCC_HSE_IsReady+0x20>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	40021000 	.word	0x40021000

080018c8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <LL_RCC_SetSysClkSource+0x24>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 0203 	bic.w	r2, r3, #3
 80018d8:	4904      	ldr	r1, [pc, #16]	; (80018ec <LL_RCC_SetSysClkSource+0x24>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40021000 	.word	0x40021000

080018f0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <LL_RCC_GetSysClkSource+0x14>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 030c 	and.w	r3, r3, #12
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	40021000 	.word	0x40021000

08001908 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <LL_RCC_SetAHBPrescaler+0x24>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001918:	4904      	ldr	r1, [pc, #16]	; (800192c <LL_RCC_SetAHBPrescaler+0x24>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <LL_RCC_SetAPB1Prescaler+0x24>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001940:	4904      	ldr	r1, [pc, #16]	; (8001954 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000

08001958 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001968:	4904      	ldr	r1, [pc, #16]	; (800197c <LL_RCC_SetAPB2Prescaler+0x24>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4313      	orrs	r3, r2
 800196e:	604b      	str	r3, [r1, #4]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000

08001980 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <LL_RCC_PLL_Enable+0x18>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a03      	ldr	r2, [pc, #12]	; (8001998 <LL_RCC_PLL_Enable+0x18>)
 800198a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198e:	6013      	str	r3, [r2, #0]
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	40021000 	.word	0x40021000

0800199c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <LL_RCC_PLL_IsReady+0x20>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019ac:	bf0c      	ite	eq
 80019ae:	2301      	moveq	r3, #1
 80019b0:	2300      	movne	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	40021000 	.word	0x40021000

080019c0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	430b      	orrs	r3, r1
 80019dc:	4903      	ldr	r1, [pc, #12]	; (80019ec <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	40021000 	.word	0x40021000

080019f0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	4907      	ldr	r1, [pc, #28]	; (8001a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a2a:	69da      	ldr	r2, [r3, #28]
 8001a2c:	4907      	ldr	r1, [pc, #28]	; (8001a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a36:	69da      	ldr	r2, [r3, #28]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000

08001a50 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a58:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a5a:	699a      	ldr	r2, [r3, #24]
 8001a5c:	4907      	ldr	r1, [pc, #28]	; (8001a7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a66:	699a      	ldr	r2, [r3, #24]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000

08001a80 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <LL_FLASH_SetLatency+0x24>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 0207 	bic.w	r2, r3, #7
 8001a90:	4904      	ldr	r1, [pc, #16]	; (8001aa4 <LL_FLASH_SetLatency+0x24>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bc80      	pop	{r7}
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	40022000 	.word	0x40022000

08001aa8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <LL_FLASH_GetLatency+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0307 	and.w	r3, r3, #7
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	40022000 	.word	0x40022000

08001ac0 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d106      	bne.n	8001adc <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <LL_SYSTICK_SetClkSource+0x34>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a08      	ldr	r2, [pc, #32]	; (8001af4 <LL_SYSTICK_SetClkSource+0x34>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001ada:	e005      	b.n	8001ae8 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <LL_SYSTICK_SetClkSource+0x34>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <LL_SYSTICK_SetClkSource+0x34>)
 8001ae2:	f023 0304 	bic.w	r3, r3, #4
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <LL_TIM_DisableARRPreload>:
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	601a      	str	r2, [r3, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
	...

08001b18 <LL_TIM_OC_DisableFast>:
{
 8001b18:	b4b0      	push	{r4, r5, r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d01c      	beq.n	8001b62 <LL_TIM_OC_DisableFast+0x4a>
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d017      	beq.n	8001b5e <LL_TIM_OC_DisableFast+0x46>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b10      	cmp	r3, #16
 8001b32:	d012      	beq.n	8001b5a <LL_TIM_OC_DisableFast+0x42>
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	2b40      	cmp	r3, #64	; 0x40
 8001b38:	d00d      	beq.n	8001b56 <LL_TIM_OC_DisableFast+0x3e>
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b40:	d007      	beq.n	8001b52 <LL_TIM_OC_DisableFast+0x3a>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b48:	d101      	bne.n	8001b4e <LL_TIM_OC_DisableFast+0x36>
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	e00a      	b.n	8001b64 <LL_TIM_OC_DisableFast+0x4c>
 8001b4e:	2306      	movs	r3, #6
 8001b50:	e008      	b.n	8001b64 <LL_TIM_OC_DisableFast+0x4c>
 8001b52:	2304      	movs	r3, #4
 8001b54:	e006      	b.n	8001b64 <LL_TIM_OC_DisableFast+0x4c>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e004      	b.n	8001b64 <LL_TIM_OC_DisableFast+0x4c>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e002      	b.n	8001b64 <LL_TIM_OC_DisableFast+0x4c>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <LL_TIM_OC_DisableFast+0x4c>
 8001b62:	2300      	movs	r3, #0
 8001b64:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3318      	adds	r3, #24
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	4629      	mov	r1, r5
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <LL_TIM_OC_DisableFast+0x7c>)
 8001b70:	5c5b      	ldrb	r3, [r3, r1]
 8001b72:	4413      	add	r3, r2
 8001b74:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001b76:	6822      	ldr	r2, [r4, #0]
 8001b78:	4629      	mov	r1, r5
 8001b7a:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <LL_TIM_OC_DisableFast+0x80>)
 8001b7c:	5c5b      	ldrb	r3, [r3, r1]
 8001b7e:	4619      	mov	r1, r3
 8001b80:	2304      	movs	r3, #4
 8001b82:	408b      	lsls	r3, r1
 8001b84:	43db      	mvns	r3, r3
 8001b86:	4013      	ands	r3, r2
 8001b88:	6023      	str	r3, [r4, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bcb0      	pop	{r4, r5, r7}
 8001b92:	4770      	bx	lr
 8001b94:	08002774 	.word	0x08002774
 8001b98:	0800277c 	.word	0x0800277c

08001b9c <LL_TIM_OC_EnablePreload>:
{
 8001b9c:	b4b0      	push	{r4, r5, r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d01c      	beq.n	8001be6 <LL_TIM_OC_EnablePreload+0x4a>
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d017      	beq.n	8001be2 <LL_TIM_OC_EnablePreload+0x46>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	2b10      	cmp	r3, #16
 8001bb6:	d012      	beq.n	8001bde <LL_TIM_OC_EnablePreload+0x42>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2b40      	cmp	r3, #64	; 0x40
 8001bbc:	d00d      	beq.n	8001bda <LL_TIM_OC_EnablePreload+0x3e>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bc4:	d007      	beq.n	8001bd6 <LL_TIM_OC_EnablePreload+0x3a>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bcc:	d101      	bne.n	8001bd2 <LL_TIM_OC_EnablePreload+0x36>
 8001bce:	2305      	movs	r3, #5
 8001bd0:	e00a      	b.n	8001be8 <LL_TIM_OC_EnablePreload+0x4c>
 8001bd2:	2306      	movs	r3, #6
 8001bd4:	e008      	b.n	8001be8 <LL_TIM_OC_EnablePreload+0x4c>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	e006      	b.n	8001be8 <LL_TIM_OC_EnablePreload+0x4c>
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e004      	b.n	8001be8 <LL_TIM_OC_EnablePreload+0x4c>
 8001bde:	2302      	movs	r3, #2
 8001be0:	e002      	b.n	8001be8 <LL_TIM_OC_EnablePreload+0x4c>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <LL_TIM_OC_EnablePreload+0x4c>
 8001be6:	2300      	movs	r3, #0
 8001be8:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3318      	adds	r3, #24
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4629      	mov	r1, r5
 8001bf2:	4b09      	ldr	r3, [pc, #36]	; (8001c18 <LL_TIM_OC_EnablePreload+0x7c>)
 8001bf4:	5c5b      	ldrb	r3, [r3, r1]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001bfa:	6822      	ldr	r2, [r4, #0]
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <LL_TIM_OC_EnablePreload+0x80>)
 8001c00:	5c5b      	ldrb	r3, [r3, r1]
 8001c02:	4619      	mov	r1, r3
 8001c04:	2308      	movs	r3, #8
 8001c06:	408b      	lsls	r3, r1
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	6023      	str	r3, [r4, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bcb0      	pop	{r4, r5, r7}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	08002774 	.word	0x08002774
 8001c1c:	0800277c 	.word	0x0800277c

08001c20 <LL_TIM_SetTriggerOutput>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	431a      	orrs	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	605a      	str	r2, [r3, #4]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <LL_TIM_DisableMasterSlaveMode>:
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	609a      	str	r2, [r3, #8]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr

08001c62 <LL_GPIO_SetOutputPin>:
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	611a      	str	r2, [r3, #16]
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <LL_GPIO_AF_DisableRemap_SWJ>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_DisableRemap_SWJ
  * @note  DISABLE: JTAG-DP Disabled and SW-DP Disabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_DisableRemap_SWJ(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  CLEAR_BIT(AFIO->MAPR,AFIO_MAPR_SWJ_CFG);
 8001c84:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <LL_GPIO_AF_DisableRemap_SWJ+0x24>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <LL_GPIO_AF_DisableRemap_SWJ+0x24>)
 8001c8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c8e:	6053      	str	r3, [r2, #4]
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_DISABLE);
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <LL_GPIO_AF_DisableRemap_SWJ+0x24>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <LL_GPIO_AF_DisableRemap_SWJ+0x24>)
 8001c96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c9a:	6053      	str	r3, [r2, #4]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr
 8001ca4:	40010000 	.word	0x40010000

08001ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 8001cae:	2001      	movs	r0, #1
 8001cb0:	f7ff fece 	bl	8001a50 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001cb4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001cb8:	f7ff feb2 	bl	8001a20 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f7ff fc49 	bl	8001554 <__NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  LL_GPIO_AF_DisableRemap_SWJ();
 8001cc2:	f7ff ffdd 	bl	8001c80 <LL_GPIO_AF_DisableRemap_SWJ>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc6:	f000 f825 	bl	8001d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cca:	f000 f99b 	bl	8002004 <MX_GPIO_Init>
  MX_DMA_Init();
 8001cce:	f000 f971 	bl	8001fb4 <MX_DMA_Init>
  MX_SPI1_Init();
 8001cd2:	f000 f861 	bl	8001d98 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001cd6:	f000 f901 	bl	8001edc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);
 8001cda:	490c      	ldr	r1, [pc, #48]	; (8001d0c <main+0x64>)
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <main+0x68>)
 8001cde:	f7ff ffc0 	bl	8001c62 <LL_GPIO_SetOutputPin>

  cpmdisp_Init();
 8001ce2:	f7fe ff51 	bl	8000b88 <cpmdisp_Init>

  unsigned int i=0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char buf[20];

	  utoa(i++, buf, 10);
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	617a      	str	r2, [r7, #20]
 8001cf0:	4639      	mov	r1, r7
 8001cf2:	220a      	movs	r2, #10
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fba7 	bl	8002448 <utoa>
//	  cpmdisp_puts("Hello number ");
	  cpmdisp_puts(buf);
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe ffa9 	bl	8000c54 <cpmdisp_puts>
//	  cpmdisp_putc('0');
//	  cpmdisp_putc('1');
//	  cpmdisp_putc('2');
//	  cpmdisp_putc('0');
//	  cpmdisp_putc('2');
	  cpmdisp_putc('\n');
 8001d02:	200a      	movs	r0, #10
 8001d04:	f7fe ff54 	bl	8000bb0 <cpmdisp_putc>
  {
 8001d08:	e7ef      	b.n	8001cea <main+0x42>
 8001d0a:	bf00      	nop
 8001d0c:	04200020 	.word	0x04200020
 8001d10:	40011000 	.word	0x40011000

08001d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001d18:	2002      	movs	r0, #2
 8001d1a:	f7ff feb1 	bl	8001a80 <LL_FLASH_SetLatency>

   if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8001d1e:	f7ff fec3 	bl	8001aa8 <LL_FLASH_GetLatency>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d001      	beq.n	8001d2c <SystemClock_Config+0x18>
  {
    Error_Handler();  
 8001d28:	f000 f9b2 	bl	8002090 <Error_Handler>
  }
  LL_RCC_HSE_Enable();
 8001d2c:	f7ff fdac 	bl	8001888 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8001d30:	bf00      	nop
 8001d32:	f7ff fdb7 	bl	80018a4 <LL_RCC_HSE_IsReady>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d1fa      	bne.n	8001d32 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 8001d3c:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8001d40:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001d44:	f7ff fe3c 	bl	80019c0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001d48:	f7ff fe1a 	bl	8001980 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001d4c:	bf00      	nop
 8001d4e:	f7ff fe25 	bl	800199c <LL_RCC_PLL_IsReady>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d1fa      	bne.n	8001d4e <SystemClock_Config+0x3a>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001d58:	2000      	movs	r0, #0
 8001d5a:	f7ff fdd5 	bl	8001908 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001d5e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d62:	f7ff fde5 	bl	8001930 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff fdf6 	bl	8001958 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001d6c:	2002      	movs	r0, #2
 8001d6e:	f7ff fdab 	bl	80018c8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001d72:	bf00      	nop
 8001d74:	f7ff fdbc 	bl	80018f0 <LL_RCC_GetSysClkSource>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d1fa      	bne.n	8001d74 <SystemClock_Config+0x60>
  {
  
  }
  LL_Init1msTick(72000000);
 8001d7e:	4805      	ldr	r0, [pc, #20]	; (8001d94 <SystemClock_Config+0x80>)
 8001d80:	f7fe fe12 	bl	80009a8 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8001d84:	2004      	movs	r0, #4
 8001d86:	f7ff fe9b 	bl	8001ac0 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(72000000);
 8001d8a:	4802      	ldr	r0, [pc, #8]	; (8001d94 <SystemClock_Config+0x80>)
 8001d8c:	f7fe fe3e 	bl	8000a0c <LL_SetSystemCoreClock>
}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	044aa200 	.word	0x044aa200

08001d98 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b090      	sub	sp, #64	; 0x40
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001d9e:	f107 0318 	add.w	r3, r7, #24
 8001da2:	2228      	movs	r2, #40	; 0x28
 8001da4:	2100      	movs	r1, #0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 fb08 	bl	80023bc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8001dba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001dbe:	f7ff fe47 	bl	8001a50 <LL_APB2_GRP1_EnableClock>
  
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001dc2:	2004      	movs	r0, #4
 8001dc4:	f7ff fe44 	bl	8001a50 <LL_APB2_GRP1_EnableClock>
  /**SPI1 GPIO Configuration  
  PA5   ------> SPI1_SCK
  PA6   ------> SPI1_MISO
  PA7   ------> SPI1_MOSI 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5|LL_GPIO_PIN_7;
 8001dc8:	f24a 03a0 	movw	r3, #41120	; 0xa0a0
 8001dcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001dce:	2309      	movs	r3, #9
 8001dd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	483c      	ldr	r0, [pc, #240]	; (8001ed0 <MX_SPI1_Init+0x138>)
 8001de0:	f7fe fa6c 	bl	80002bc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001de4:	f244 0340 	movw	r3, #16448	; 0x4040
 8001de8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001dea:	2308      	movs	r3, #8
 8001dec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001dee:	2301      	movs	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4836      	ldr	r0, [pc, #216]	; (8001ed0 <MX_SPI1_Init+0x138>)
 8001df8:	f7fe fa60 	bl	80002bc <LL_GPIO_Init>

  /* SPI1 DMA Init */
  
  /* SPI1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	2103      	movs	r1, #3
 8001e00:	4834      	ldr	r0, [pc, #208]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e02:	f7ff fc51 	bl	80016a8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_VERYHIGH);
 8001e06:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001e0a:	2103      	movs	r1, #3
 8001e0c:	4831      	ldr	r0, [pc, #196]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e0e:	f7ff fd19 	bl	8001844 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2103      	movs	r1, #3
 8001e16:	482f      	ldr	r0, [pc, #188]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e18:	f7ff fc6a 	bl	80016f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2103      	movs	r1, #3
 8001e20:	482c      	ldr	r0, [pc, #176]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e22:	f7ff fc87 	bl	8001734 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8001e26:	2280      	movs	r2, #128	; 0x80
 8001e28:	2103      	movs	r1, #3
 8001e2a:	482a      	ldr	r0, [pc, #168]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e2c:	f7ff fca4 	bl	8001778 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_HALFWORD);
 8001e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e34:	2103      	movs	r1, #3
 8001e36:	4827      	ldr	r0, [pc, #156]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e38:	f7ff fcc0 	bl	80017bc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_HALFWORD);
 8001e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e40:	2103      	movs	r1, #3
 8001e42:	4824      	ldr	r0, [pc, #144]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e44:	f7ff fcdc 	bl	8001800 <LL_DMA_SetMemorySize>

  /* SPI1_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001e48:	2200      	movs	r2, #0
 8001e4a:	2102      	movs	r1, #2
 8001e4c:	4821      	ldr	r0, [pc, #132]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e4e:	f7ff fc2b 	bl	80016a8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_HIGH);
 8001e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e56:	2102      	movs	r1, #2
 8001e58:	481e      	ldr	r0, [pc, #120]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e5a:	f7ff fcf3 	bl	8001844 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2102      	movs	r1, #2
 8001e62:	481c      	ldr	r0, [pc, #112]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e64:	f7ff fc44 	bl	80016f0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	4819      	ldr	r0, [pc, #100]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e6e:	f7ff fc61 	bl	8001734 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8001e72:	2280      	movs	r2, #128	; 0x80
 8001e74:	2102      	movs	r1, #2
 8001e76:	4817      	ldr	r0, [pc, #92]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e78:	f7ff fc7e 	bl	8001778 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2102      	movs	r1, #2
 8001e80:	4814      	ldr	r0, [pc, #80]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e82:	f7ff fc9b 	bl	80017bc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2102      	movs	r1, #2
 8001e8a:	4812      	ldr	r0, [pc, #72]	; (8001ed4 <MX_SPI1_Init+0x13c>)
 8001e8c:	f7ff fcb8 	bl	8001800 <LL_DMA_SetMemorySize>

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001e94:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001e98:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001ea6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8001eac:	2300      	movs	r3, #0
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 10;
 8001eb8:	230a      	movs	r3, #10
 8001eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8001ebc:	f107 0318 	add.w	r3, r7, #24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_SPI1_Init+0x140>)
 8001ec4:	f7fe fa7d 	bl	80003c2 <LL_SPI_Init>
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ec8:	bf00      	nop
 8001eca:	3740      	adds	r7, #64	; 0x40
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40010800 	.word	0x40010800
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	40013000 	.word	0x40013000

08001edc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b092      	sub	sp, #72	; 0x48
 8001ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001ee2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
 8001eea:	605a      	str	r2, [r3, #4]
 8001eec:	609a      	str	r2, [r3, #8]
 8001eee:	60da      	str	r2, [r3, #12]
 8001ef0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001ef2:	f107 0314 	add.w	r3, r7, #20
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 fa5e 	bl	80023bc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	463b      	mov	r3, r7
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	60da      	str	r2, [r3, #12]
 8001f0c:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f7ff fd86 	bl	8001a20 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 71;
 8001f14:	2347      	movs	r3, #71	; 0x47
 8001f16:	86bb      	strh	r3, [r7, #52]	; 0x34
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_InitStruct.Autoreload = 999;
 8001f1c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001f22:	2300      	movs	r3, #0
 8001f24:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8001f26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f30:	f7fe fafe 	bl	8000530 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001f34:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f38:	f7ff fdde 	bl	8001af8 <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH2);
 8001f3c:	2110      	movs	r1, #16
 8001f3e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f42:	f7ff fe2b 	bl	8001b9c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001f46:	2360      	movs	r3, #96	; 0x60
 8001f48:	617b      	str	r3, [r7, #20]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61bb      	str	r3, [r7, #24]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.CompareValue = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2110      	movs	r1, #16
 8001f62:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f66:	f7fe fb41 	bl	80005ec <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH2);
 8001f6a:	2110      	movs	r1, #16
 8001f6c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f70:	f7ff fdd2 	bl	8001b18 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001f74:	2100      	movs	r1, #0
 8001f76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f7a:	f7ff fe51 	bl	8001c20 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001f7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f82:	f7ff fe5f 	bl	8001c44 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8001f86:	2004      	movs	r0, #4
 8001f88:	f7ff fd62 	bl	8001a50 <LL_APB2_GRP1_EnableClock>
  /**TIM2 GPIO Configuration  
  PA1   ------> TIM2_CH2 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001f8c:	f240 2302 	movw	r3, #514	; 0x202
 8001f90:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001f92:	2309      	movs	r3, #9
 8001f94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001f96:	2302      	movs	r3, #2
 8001f98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4803      	ldr	r0, [pc, #12]	; (8001fb0 <MX_TIM2_Init+0xd4>)
 8001fa4:	f7fe f98a 	bl	80002bc <LL_GPIO_Init>

}
 8001fa8:	bf00      	nop
 8001faa:	3748      	adds	r7, #72	; 0x48
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40010800 	.word	0x40010800

08001fb4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001fb8:	2001      	movs	r0, #1
 8001fba:	f7ff fd19 	bl	80019f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001fbe:	f7ff faed 	bl	800159c <__NVIC_GetPriorityGrouping>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fb3b 	bl	8001644 <NVIC_EncodePriority>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	200c      	movs	r0, #12
 8001fd4:	f7ff fb0c 	bl	80015f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001fd8:	200c      	movs	r0, #12
 8001fda:	f7ff faed 	bl	80015b8 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001fde:	f7ff fadd 	bl	800159c <__NVIC_GetPriorityGrouping>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fb2b 	bl	8001644 <NVIC_EncodePriority>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	200d      	movs	r0, #13
 8001ff4:	f7ff fafc 	bl	80015f0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001ff8:	200d      	movs	r0, #13
 8001ffa:	f7ff fadd 	bl	80015b8 <__NVIC_EnableIRQ>

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 8002018:	2010      	movs	r0, #16
 800201a:	f7ff fd19 	bl	8001a50 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 800201e:	2020      	movs	r0, #32
 8002020:	f7ff fd16 	bl	8001a50 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8002024:	2004      	movs	r0, #4
 8002026:	f7ff fd13 	bl	8001a50 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_SetOutputPin(LED_GPIO_Port, LED_Pin);
 800202a:	4916      	ldr	r1, [pc, #88]	; (8002084 <MX_GPIO_Init+0x80>)
 800202c:	4816      	ldr	r0, [pc, #88]	; (8002088 <MX_GPIO_Init+0x84>)
 800202e:	f7ff fe18 	bl	8001c62 <LL_GPIO_SetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(GPIOA, ILI9341_DC_Pin|ILI9341_CS_Pin);
 8002032:	f641 0118 	movw	r1, #6168	; 0x1818
 8002036:	4815      	ldr	r0, [pc, #84]	; (800208c <MX_GPIO_Init+0x88>)
 8002038:	f7ff fe13 	bl	8001c62 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_Pin;
 800203c:	4b11      	ldr	r3, [pc, #68]	; (8002084 <MX_GPIO_Init+0x80>)
 800203e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002040:	2301      	movs	r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002044:	2302      	movs	r3, #2
 8002046:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800204c:	2301      	movs	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	4619      	mov	r1, r3
 8002054:	480c      	ldr	r0, [pc, #48]	; (8002088 <MX_GPIO_Init+0x84>)
 8002056:	f7fe f931 	bl	80002bc <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ILI9341_DC_Pin|ILI9341_CS_Pin;
 800205a:	f641 0318 	movw	r3, #6168	; 0x1818
 800205e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002060:	2301      	movs	r3, #1
 8002062:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800206c:	2301      	movs	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	4619      	mov	r1, r3
 8002074:	4805      	ldr	r0, [pc, #20]	; (800208c <MX_GPIO_Init+0x88>)
 8002076:	f7fe f921 	bl	80002bc <LL_GPIO_Init>

}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	04200020 	.word	0x04200020
 8002088:	40011000 	.word	0x40011000
 800208c:	40010800 	.word	0x40010800

08002090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <LL_DMA_DisableChannel>:
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	4a0a      	ldr	r2, [pc, #40]	; (80020d4 <LL_DMA_DisableChannel+0x38>)
 80020ac:	5cd3      	ldrb	r3, [r2, r3]
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	3a01      	subs	r2, #1
 80020ba:	4906      	ldr	r1, [pc, #24]	; (80020d4 <LL_DMA_DisableChannel+0x38>)
 80020bc:	5c8a      	ldrb	r2, [r1, r2]
 80020be:	4611      	mov	r1, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	440a      	add	r2, r1
 80020c4:	f023 0301 	bic.w	r3, r3, #1
 80020c8:	6013      	str	r3, [r2, #0]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	08002784 	.word	0x08002784

080020d8 <LL_DMA_IsEnabledChannel>:
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	4a09      	ldr	r2, [pc, #36]	; (800210c <LL_DMA_IsEnabledChannel+0x34>)
 80020e8:	5cd3      	ldrb	r3, [r2, r3]
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4413      	add	r3, r2
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
                   DMA_CCR_EN) == (DMA_CCR_EN));
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	08002784 	.word	0x08002784

08002110 <LL_DMA_IsActiveFlag_TE3>:
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF3) == (DMA_ISR_TEIF3));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002124:	bf0c      	ite	eq
 8002126:	2301      	moveq	r3, #1
 8002128:	2300      	movne	r3, #0
 800212a:	b2db      	uxtb	r3, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <LL_DMA_ClearFlag_TC3>:
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF3);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002144:	605a      	str	r2, [r3, #4]
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <LL_DMA_ClearFlag_TE3>:
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF3);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800215e:	605a      	str	r2, [r3, #4]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <LL_SPI_SetDataWidth>:
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR1, SPI_CR1_DFF, DataWidth);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	601a      	str	r2, [r3, #0]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <LL_SPI_DisableDMAReq_TX>:
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXDMAEN);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f023 0202 	bic.w	r2, r3, #2
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	605a      	str	r2, [r3, #4]
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <LL_GPIO_SetOutputPin>:
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	611a      	str	r2, [r3, #16]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <LL_GPIO_ResetOutputPin>:
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
 80021d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	615a      	str	r2, [r3, #20]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <HardFault_Handler+0x4>

080021fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021fe:	e7fe      	b.n	80021fe <MemManage_Handler+0x4>

08002200 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002204:	e7fe      	b.n	8002204 <BusFault_Handler+0x4>

08002206 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800220a:	e7fe      	b.n	800220a <UsageFault_Handler+0x4>

0800220c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	bc80      	pop	{r7}
 800223a:	4770      	bx	lr

0800223c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	TX_DMA_IRQ_HANDLER();
 800224c:	2103      	movs	r1, #3
 800224e:	4816      	ldr	r0, [pc, #88]	; (80022a8 <DMA1_Channel3_IRQHandler+0x60>)
 8002250:	f7ff ff24 	bl	800209c <LL_DMA_DisableChannel>
 8002254:	bf00      	nop
 8002256:	2103      	movs	r1, #3
 8002258:	4813      	ldr	r0, [pc, #76]	; (80022a8 <DMA1_Channel3_IRQHandler+0x60>)
 800225a:	f7ff ff3d 	bl	80020d8 <LL_DMA_IsEnabledChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f8      	bne.n	8002256 <DMA1_Channel3_IRQHandler+0xe>
 8002264:	4811      	ldr	r0, [pc, #68]	; (80022ac <DMA1_Channel3_IRQHandler+0x64>)
 8002266:	f7ff ff92 	bl	800218e <LL_SPI_DisableDMAReq_TX>
 800226a:	480f      	ldr	r0, [pc, #60]	; (80022a8 <DMA1_Channel3_IRQHandler+0x60>)
 800226c:	f7ff ff50 	bl	8002110 <LL_DMA_IsActiveFlag_TE3>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d006      	beq.n	8002284 <DMA1_Channel3_IRQHandler+0x3c>
 8002276:	490e      	ldr	r1, [pc, #56]	; (80022b0 <DMA1_Channel3_IRQHandler+0x68>)
 8002278:	480e      	ldr	r0, [pc, #56]	; (80022b4 <DMA1_Channel3_IRQHandler+0x6c>)
 800227a:	f7ff ffa6 	bl	80021ca <LL_GPIO_ResetOutputPin>
 800227e:	480a      	ldr	r0, [pc, #40]	; (80022a8 <DMA1_Channel3_IRQHandler+0x60>)
 8002280:	f7ff ff66 	bl	8002150 <LL_DMA_ClearFlag_TE3>
 8002284:	4808      	ldr	r0, [pc, #32]	; (80022a8 <DMA1_Channel3_IRQHandler+0x60>)
 8002286:	f7ff ff56 	bl	8002136 <LL_DMA_ClearFlag_TC3>
 800228a:	2100      	movs	r1, #0
 800228c:	4807      	ldr	r0, [pc, #28]	; (80022ac <DMA1_Channel3_IRQHandler+0x64>)
 800228e:	f7ff ff6c 	bl	800216a <LL_SPI_SetDataWidth>
 8002292:	f241 0110 	movw	r1, #4112	; 0x1010
 8002296:	4808      	ldr	r0, [pc, #32]	; (80022b8 <DMA1_Channel3_IRQHandler+0x70>)
 8002298:	f7ff ff88 	bl	80021ac <LL_GPIO_SetOutputPin>
 800229c:	4b07      	ldr	r3, [pc, #28]	; (80022bc <DMA1_Channel3_IRQHandler+0x74>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40013000 	.word	0x40013000
 80022b0:	04200020 	.word	0x04200020
 80022b4:	40011000 	.word	0x40011000
 80022b8:	40010800 	.word	0x40010800
 80022bc:	20000022 	.word	0x20000022

080022c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80022c4:	4b15      	ldr	r3, [pc, #84]	; (800231c <SystemInit+0x5c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <SystemInit+0x5c>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80022d0:	4b12      	ldr	r3, [pc, #72]	; (800231c <SystemInit+0x5c>)
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	4911      	ldr	r1, [pc, #68]	; (800231c <SystemInit+0x5c>)
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <SystemInit+0x60>)
 80022d8:	4013      	ands	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <SystemInit+0x5c>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0e      	ldr	r2, [pc, #56]	; (800231c <SystemInit+0x5c>)
 80022e2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80022e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022ec:	4b0b      	ldr	r3, [pc, #44]	; (800231c <SystemInit+0x5c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <SystemInit+0x5c>)
 80022f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <SystemInit+0x5c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	4a07      	ldr	r2, [pc, #28]	; (800231c <SystemInit+0x5c>)
 80022fe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002302:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <SystemInit+0x5c>)
 8002306:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800230a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <SystemInit+0x64>)
 800230e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002312:	609a      	str	r2, [r3, #8]
#endif 
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	40021000 	.word	0x40021000
 8002320:	f8ff0000 	.word	0xf8ff0000
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002328:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800232a:	e003      	b.n	8002334 <LoopCopyDataInit>

0800232c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800232c:	4b0b      	ldr	r3, [pc, #44]	; (800235c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800232e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002330:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002332:	3104      	adds	r1, #4

08002334 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002334:	480a      	ldr	r0, [pc, #40]	; (8002360 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002338:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800233a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800233c:	d3f6      	bcc.n	800232c <CopyDataInit>
  ldr r2, =_sbss
 800233e:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002340:	e002      	b.n	8002348 <LoopFillZerobss>

08002342 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002344:	f842 3b04 	str.w	r3, [r2], #4

08002348 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002348:	4b08      	ldr	r3, [pc, #32]	; (800236c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800234a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800234c:	d3f9      	bcc.n	8002342 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800234e:	f7ff ffb7 	bl	80022c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002352:	f000 f80f 	bl	8002374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002356:	f7ff fca7 	bl	8001ca8 <main>
  bx lr
 800235a:	4770      	bx	lr
  ldr r3, =_sidata
 800235c:	080027b8 	.word	0x080027b8
  ldr r0, =_sdata
 8002360:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002364:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8002368:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 800236c:	20000028 	.word	0x20000028

08002370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002370:	e7fe      	b.n	8002370 <ADC1_2_IRQHandler>
	...

08002374 <__libc_init_array>:
 8002374:	b570      	push	{r4, r5, r6, lr}
 8002376:	2500      	movs	r5, #0
 8002378:	4e0c      	ldr	r6, [pc, #48]	; (80023ac <__libc_init_array+0x38>)
 800237a:	4c0d      	ldr	r4, [pc, #52]	; (80023b0 <__libc_init_array+0x3c>)
 800237c:	1ba4      	subs	r4, r4, r6
 800237e:	10a4      	asrs	r4, r4, #2
 8002380:	42a5      	cmp	r5, r4
 8002382:	d109      	bne.n	8002398 <__libc_init_array+0x24>
 8002384:	f000 f862 	bl	800244c <_init>
 8002388:	2500      	movs	r5, #0
 800238a:	4e0a      	ldr	r6, [pc, #40]	; (80023b4 <__libc_init_array+0x40>)
 800238c:	4c0a      	ldr	r4, [pc, #40]	; (80023b8 <__libc_init_array+0x44>)
 800238e:	1ba4      	subs	r4, r4, r6
 8002390:	10a4      	asrs	r4, r4, #2
 8002392:	42a5      	cmp	r5, r4
 8002394:	d105      	bne.n	80023a2 <__libc_init_array+0x2e>
 8002396:	bd70      	pop	{r4, r5, r6, pc}
 8002398:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800239c:	4798      	blx	r3
 800239e:	3501      	adds	r5, #1
 80023a0:	e7ee      	b.n	8002380 <__libc_init_array+0xc>
 80023a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023a6:	4798      	blx	r3
 80023a8:	3501      	adds	r5, #1
 80023aa:	e7f2      	b.n	8002392 <__libc_init_array+0x1e>
 80023ac:	080027b0 	.word	0x080027b0
 80023b0:	080027b0 	.word	0x080027b0
 80023b4:	080027b0 	.word	0x080027b0
 80023b8:	080027b4 	.word	0x080027b4

080023bc <memset>:
 80023bc:	4603      	mov	r3, r0
 80023be:	4402      	add	r2, r0
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d100      	bne.n	80023c6 <memset+0xa>
 80023c4:	4770      	bx	lr
 80023c6:	f803 1b01 	strb.w	r1, [r3], #1
 80023ca:	e7f9      	b.n	80023c0 <memset+0x4>

080023cc <__utoa>:
 80023cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ce:	b08b      	sub	sp, #44	; 0x2c
 80023d0:	4605      	mov	r5, r0
 80023d2:	460c      	mov	r4, r1
 80023d4:	466e      	mov	r6, sp
 80023d6:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <__utoa+0x78>)
 80023d8:	f103 0c20 	add.w	ip, r3, #32
 80023dc:	4637      	mov	r7, r6
 80023de:	6818      	ldr	r0, [r3, #0]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	3308      	adds	r3, #8
 80023e4:	c703      	stmia	r7!, {r0, r1}
 80023e6:	4563      	cmp	r3, ip
 80023e8:	463e      	mov	r6, r7
 80023ea:	d1f7      	bne.n	80023dc <__utoa+0x10>
 80023ec:	6818      	ldr	r0, [r3, #0]
 80023ee:	791b      	ldrb	r3, [r3, #4]
 80023f0:	6038      	str	r0, [r7, #0]
 80023f2:	713b      	strb	r3, [r7, #4]
 80023f4:	1e93      	subs	r3, r2, #2
 80023f6:	2b22      	cmp	r3, #34	; 0x22
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	d904      	bls.n	8002408 <__utoa+0x3c>
 80023fe:	7023      	strb	r3, [r4, #0]
 8002400:	461c      	mov	r4, r3
 8002402:	4620      	mov	r0, r4
 8002404:	b00b      	add	sp, #44	; 0x2c
 8002406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002408:	1e66      	subs	r6, r4, #1
 800240a:	fbb5 f0f2 	udiv	r0, r5, r2
 800240e:	fb02 5510 	mls	r5, r2, r0, r5
 8002412:	af0a      	add	r7, sp, #40	; 0x28
 8002414:	443d      	add	r5, r7
 8002416:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800241a:	1c59      	adds	r1, r3, #1
 800241c:	f806 5f01 	strb.w	r5, [r6, #1]!
 8002420:	4605      	mov	r5, r0
 8002422:	b968      	cbnz	r0, 8002440 <__utoa+0x74>
 8002424:	4622      	mov	r2, r4
 8002426:	5460      	strb	r0, [r4, r1]
 8002428:	4423      	add	r3, r4
 800242a:	1b19      	subs	r1, r3, r4
 800242c:	1b10      	subs	r0, r2, r4
 800242e:	4281      	cmp	r1, r0
 8002430:	dde7      	ble.n	8002402 <__utoa+0x36>
 8002432:	7811      	ldrb	r1, [r2, #0]
 8002434:	7818      	ldrb	r0, [r3, #0]
 8002436:	f802 0b01 	strb.w	r0, [r2], #1
 800243a:	f803 1901 	strb.w	r1, [r3], #-1
 800243e:	e7f4      	b.n	800242a <__utoa+0x5e>
 8002440:	460b      	mov	r3, r1
 8002442:	e7e2      	b.n	800240a <__utoa+0x3e>
 8002444:	0800278b 	.word	0x0800278b

08002448 <utoa>:
 8002448:	f7ff bfc0 	b.w	80023cc <__utoa>

0800244c <_init>:
 800244c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244e:	bf00      	nop
 8002450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002452:	bc08      	pop	{r3}
 8002454:	469e      	mov	lr, r3
 8002456:	4770      	bx	lr

08002458 <_fini>:
 8002458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800245a:	bf00      	nop
 800245c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800245e:	bc08      	pop	{r3}
 8002460:	469e      	mov	lr, r3
 8002462:	4770      	bx	lr
